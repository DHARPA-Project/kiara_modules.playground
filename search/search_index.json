{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kiara modules (playground) \u00b6 A set of commonly used/useful default modules (and pipelines) for Kiara . Documentation: https://dharpa.org/kiara_modules.playground Code: https://github.com/DHARPA-Project/kiara_modules.playground Description \u00b6 TODO Development \u00b6 Requirements \u00b6 Python (version >=3.6 -- some make targets only work for Python >=3.7 though) pip, virtualenv git make direnv (optional) Prepare development environment \u00b6 If you only want to work on the modules, and not the core Kiara codebase, follow the instructions below. Otherwise, please check the notes on how to setup a Kiara development environment under (TODO). git clone https://github.com/DHARPA-Project/kiara_modules.playground.git cd kiara python3 -m venv .venv source .venv/bin/activate make init After this is done, you should be able to run the included example module via: kiara run playground_example text_1=\"xxx\" text_2=\"yyy\" ... ... make targets \u00b6 init : init development project (install project & dev dependencies into virtualenv, as well as pre-commit git hook) update-dependencies : update development dependencies (mainly the core kiara package from git) flake : run flake8 tests mypy : run mypy tests test : run unit tests docs : create static documentation pages (under build/site ) serve-docs : serve documentation pages (incl. auto-reload) for getting direct feedback when working on documentation clean : clean build directories For details (and other, minor targets), check the Makefile . Running tests \u00b6 > make test # or > make coverage Copyright & license \u00b6 This project is MPL v2.0 licensed, for the license text please check the LICENSE file in this repository. Copyright (c) 2021 DHARPA project","title":"Home"},{"location":"#kiara-modules-playground","text":"A set of commonly used/useful default modules (and pipelines) for Kiara . Documentation: https://dharpa.org/kiara_modules.playground Code: https://github.com/DHARPA-Project/kiara_modules.playground","title":"kiara modules (playground)"},{"location":"#description","text":"TODO","title":"Description"},{"location":"#development","text":"","title":"Development"},{"location":"#requirements","text":"Python (version >=3.6 -- some make targets only work for Python >=3.7 though) pip, virtualenv git make direnv (optional)","title":"Requirements"},{"location":"#prepare-development-environment","text":"If you only want to work on the modules, and not the core Kiara codebase, follow the instructions below. Otherwise, please check the notes on how to setup a Kiara development environment under (TODO). git clone https://github.com/DHARPA-Project/kiara_modules.playground.git cd kiara python3 -m venv .venv source .venv/bin/activate make init After this is done, you should be able to run the included example module via: kiara run playground_example text_1=\"xxx\" text_2=\"yyy\" ... ...","title":"Prepare development environment"},{"location":"#make-targets","text":"init : init development project (install project & dev dependencies into virtualenv, as well as pre-commit git hook) update-dependencies : update development dependencies (mainly the core kiara package from git) flake : run flake8 tests mypy : run mypy tests test : run unit tests docs : create static documentation pages (under build/site ) serve-docs : serve documentation pages (incl. auto-reload) for getting direct feedback when working on documentation clean : clean build directories For details (and other, minor targets), check the Makefile .","title":"make targets"},{"location":"#running-tests","text":"> make test # or > make coverage","title":"Running tests"},{"location":"#copyright-license","text":"This project is MPL v2.0 licensed, for the license text please check the LICENSE file in this repository. Copyright (c) 2021 DHARPA project","title":"Copyright &amp; license"},{"location":"modules_list/","text":"Available module types \u00b6 This page contains a list of all available Kiara module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type. add_nodes_to_network_graph \u00b6 \u256d\u2500 Module: add_nodes_to_network_graph \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.network_analysis.network_analysis.AddNodes\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Add nodes to an existing graph. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 nodes_table_value = inputs.get_value_obj(\"node_attri\u2026 \u2502 \u2502 \u2502 \u2502 if nodes_table_value.is_none: \u2502 \u2502 # we return the graph as is \u2502 \u2502 # we are using the 'get_value_obj' method, becau\u2026 \u2502 \u2502 # actual data at all \u2502 \u2502 outputs.set_value(\"graph\", inputs.get_value_obj(\u2026 \u2502 \u2502 return \u2502 \u2502 \u2502 \u2502 input_graph: Graph = inputs.get_value_data(\"graph\") \u2502 \u2502 graph: Graph = copy.deepcopy(input_graph) \u2502 \u2502 \u2502 \u2502 nodes_table_obj: pyarrow.Table = nodes_table_value.g\u2026 \u2502 \u2502 nodes_table_index = inputs.get_value_data(\"index_col\u2026 \u2502 \u2502 \u2502 \u2502 attr_dict = ( \u2502 \u2502 nodes_table_obj.to_pandas() \u2502 \u2502 .set_index(nodes_table_index) \u2502 \u2502 .to_dict(\"index\") \u2502 \u2502 .items() \u2502 \u2502 ) \u2502 \u2502 graph.add_nodes_from(attr_dict) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"graph\", graph) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f and \u00b6 \u256d\u2500 Module: and \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.logic_gates.AndModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if both inputs are 'True'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.logic_gates.LogicProcessingModuleConf\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 delay number the delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 output is returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.delay) # type: ignore \u2502 \u2502 \u2502 \u2502 outputs.set_value( \u2502 \u2502 \"y\", inputs.get_value_data(\"a\") and inputs.get_v\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f augment_network_graph \u00b6 \u256d\u2500 Module: augment_network_graph \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.network_analysis.network_analysis.AugmentN\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Augment an existing graph with node attributes. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 nodes_table_value = inputs.get_value_obj(\"node_attri\u2026 \u2502 \u2502 \u2502 \u2502 if nodes_table_value.is_none or not nodes_table_valu\u2026 \u2502 \u2502 # we return the graph as is \u2502 \u2502 # we are using the 'get_value_obj' method, becau\u2026 \u2502 \u2502 # actual data at all \u2502 \u2502 outputs.set_value(\"graph\", inputs.get_value_obj(\u2026 \u2502 \u2502 return \u2502 \u2502 \u2502 \u2502 input_graph: Graph = inputs.get_value_data(\"graph\") \u2502 \u2502 graph: Graph = copy.deepcopy(input_graph) \u2502 \u2502 \u2502 \u2502 nodes_table_obj: pyarrow.Table = nodes_table_value.g\u2026 \u2502 \u2502 nodes_table_index = inputs.get_value_data(\"index_col\u2026 \u2502 \u2502 if nodes_table_index not in nodes_table_obj.column_n\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Node attribute table does not have a colum\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 attr_dict = ( \u2502 \u2502 nodes_table_obj.to_pandas() \u2502 \u2502 .set_index(nodes_table_index) \u2502 \u2502 .to_dict(\"index\") \u2502 \u2502 .items() \u2502 \u2502 ) \u2502 \u2502 graph.add_nodes_from(attr_dict) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"graph\", graph) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f create_graph_from_edges_table \u00b6 \u256d\u2500 Module: create_graph_from_edges_table \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.network_analysis.network_analysis.CreateGr\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Create a directed network graph object from tabular data. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.network_analysis.network_analysis.CreateGr\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 graph_type string The type of the graph. If not \u2502 \u2502 specified, a 'graph_type' input \u2502 \u2502 field will be added which will \u2502 \u2502 default to 'directed'. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"graph_type\") is not None: \u2502 \u2502 _graph_type = self.get_config_value(\"graph_type\") \u2502 \u2502 else: \u2502 \u2502 _graph_type = inputs.get_value_data(\"graph_type\") \u2502 \u2502 \u2502 \u2502 graph_type = GraphTypesEnum[_graph_type] \u2502 \u2502 \u2502 \u2502 edges_table_value = inputs.get_value_obj(\"edges_tabl\u2026 \u2502 \u2502 edges_table_obj: pyarrow.Table = edges_table_value.g\u2026 \u2502 \u2502 \u2502 \u2502 source_column = inputs.get_value_data(\"source_column\u2026 \u2502 \u2502 target_column = inputs.get_value_data(\"target_column\u2026 \u2502 \u2502 weight_column = inputs.get_value_data(\"weight_column\u2026 \u2502 \u2502 \u2502 \u2502 errors = [] \u2502 \u2502 if source_column not in edges_table_obj.column_names: \u2502 \u2502 errors.append(source_column) \u2502 \u2502 if target_column not in edges_table_obj.column_names: \u2502 \u2502 errors.append(target_column) \u2502 \u2502 if weight_column not in edges_table_obj.column_names: \u2502 \u2502 errors.append(weight_column) \u2502 \u2502 \u2502 \u2502 if errors: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't create network graph, source table m\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 min_table = edges_table_obj.select( \u2502 \u2502 (source_column, target_column, weight_column) \u2502 \u2502 ) \u2502 \u2502 pandas_table = min_table.to_pandas() \u2502 \u2502 \u2502 \u2502 if graph_type != GraphTypesEnum.directed: \u2502 \u2502 raise NotImplementedError(\"Only 'directed' graph\u2026 \u2502 \u2502 graph_cls = nx.DiGraph \u2502 \u2502 \u2502 \u2502 graph: nx.DiGraph = nx.from_pandas_edgelist( \u2502 \u2502 pandas_table, \u2502 \u2502 source_column, \u2502 \u2502 target_column, \u2502 \u2502 edge_attr=True, \u2502 \u2502 create_using=graph_cls, \u2502 \u2502 ) \u2502 \u2502 outputs.set_value(\"graph\", graph) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f create_table_from_file \u00b6 \u256d\u2500 Module: create_table_from_file \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.tabular_data.CreateTableFromFileModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Import table-like data from an item in the data registry. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.tabular_data.CreateTableModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 allow_column_filter boolean Whether to add an \u2502 \u2502 input option to \u2502 \u2502 filter columns. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 input_file: FileModel = inputs.get_value_data(\"file\") \u2502 \u2502 imported_data = csv.read_csv(input_file.path) \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"allow_column_filter\"): \u2502 \u2502 if self.get_config_value(\"columns\"): \u2502 \u2502 imported_data = imported_data.select( \u2502 \u2502 self.get_config_value(\"only_columns\") \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", imported_data) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f create_table_from_text_files \u00b6 \u256d\u2500 Module: create_table_from_text_files \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.tabular_data.CreateTableFromTextFiles\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.tabular_data.CreateTableFromTextFiles\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 columns array A list of columns to add to the \u2502 \u2502 table. Available properties: id, \u2502 \u2502 rel_path, orig_filename, \u2502 \u2502 orig_path, import_time, \u2502 \u2502 mime_type, size, content, path, \u2502 \u2502 file_name \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 bundle: FileBundleModel = inputs.get_value_data(\"fil\u2026 \u2502 \u2502 \u2502 \u2502 columns = self.get_config_value(\"columns\") \u2502 \u2502 if not columns: \u2502 \u2502 columns = DEFAULT_COLUMNS \u2502 \u2502 \u2502 \u2502 if \"content\" in columns: \u2502 \u2502 file_dict = bundle.read_text_file_contents() \u2502 \u2502 else: \u2502 \u2502 file_dict = {} \u2502 \u2502 for rel_path in bundle.included_files.keys(): \u2502 \u2502 file_dict[rel_path] = None # type: ignore \u2502 \u2502 \u2502 \u2502 tabular: typing.Dict[str, typing.List[typing.Any]] =\u2026 \u2502 \u2502 for column in columns: \u2502 \u2502 for index, rel_path in enumerate(sorted(file_dic\u2026 \u2502 \u2502 \u2502 \u2502 if column == \"content\": \u2502 \u2502 value: typing.Any = file_dict[rel_path] \u2502 \u2502 elif column == \"id\": \u2502 \u2502 value = index \u2502 \u2502 elif column == \"rel_path\": \u2502 \u2502 value = rel_path \u2502 \u2502 else: \u2502 \u2502 file_model = bundle.included_files[rel_p\u2026 \u2502 \u2502 value = getattr(file_model, column) \u2502 \u2502 \u2502 \u2502 tabular.setdefault(column, []).append(value) \u2502 \u2502 \u2502 \u2502 table = pa.Table.from_pydict(tabular) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", table) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f date_range_check \u00b6 \u256d\u2500 Module: date_range_check \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.dates.DateRangeCheckModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Check whether a date falls within a specified date range. \u2502 \u2502 \u2502 \u2502 At least one of the inputs 'earliest' or 'latest' must be \u2502 \u2502 set, it's allowed to set both, though. \u2502 \u2502 \u2502 \u2502 Return ``True`` if that's the case, otherwise ``False``. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 d = inputs.get_value_data(\"date\") \u2502 \u2502 earliest: typing.Optional[datetime.datetime] = input\u2026 \u2502 \u2502 latest: typing.Optional[datetime.datetime] = inputs.\u2026 \u2502 \u2502 \u2502 \u2502 if hasattr(d, \"as_py\"): \u2502 \u2502 d = d.as_py() \u2502 \u2502 \u2502 \u2502 if not earliest and not latest: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 \"Can't process date range check: need at lea\u2026 \u2502 \u2502 ) \u2502 \u2502 elif earliest and latest: \u2502 \u2502 matches = earliest <= d <= latest \u2502 \u2502 elif earliest: \u2502 \u2502 matches = earliest <= d \u2502 \u2502 else: \u2502 \u2502 matches = d <= latest \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"within_range\", matches) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f dummy \u00b6 \u256d\u2500 Module: dummy \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.dev.DummyModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Module that simulates processing, but uses hard-coded \u2502 \u2502 outputs as a result. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.dev.DummyProcessingModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 doc string -- n/a -- \u2502 \u2502 input_schema object The input schema for this \u2502 \u2502 module. \u2502 \u2502 output_schema object The output schema for this \u2502 \u2502 module. \u2502 \u2502 outputs object The (dummy) output for this \u2502 \u2502 module. \u2502 \u2502 delay number The delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 (dummy) outputs are \u2502 \u2502 returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \"\"\"Returns the hardcoded output values that are set \u2026 \u2502 \u2502 \u2502 \u2502 Optionally, this module can simulate processing by w\u2026 \u2502 \u2502 \"\"\" \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # type: ignore \u2502 \u2502 \u2502 \u2502 output_values: typing.Mapping = self.config.get(\"out\u2026 \u2502 \u2502 \u2502 \u2502 value_dict = {} \u2502 \u2502 for output_name in self.output_names: \u2502 \u2502 if output_name not in output_values.keys(): \u2502 \u2502 raise NotImplementedError() \u2502 \u2502 # v = self.output_schemas[output_name].type_\u2026 \u2502 \u2502 # value_dict[output_name] = v \u2502 \u2502 else: \u2502 \u2502 value_dict[output_name] = output_values[outp\u2026 \u2502 \u2502 outputs.set_values(**value_dict) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f extract_date \u00b6 \u256d\u2500 Module: extract_date \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.dates.ExtractDateModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 text = inputs.get_value_data(\"text\") \u2502 \u2502 \u2502 \u2502 date_match = re.findall(r\"_(\\d{4}-\\d{2}-\\d{2})_\", te\u2026 \u2502 \u2502 assert date_match \u2502 \u2502 \u2502 \u2502 d_obj = parser.parse(date_match[0]) # type: ignore \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"date\", d_obj) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f filter_table \u00b6 \u256d\u2500 Module: filter_table \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.tabular_data.FilterTableModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.tabular_data.TableFilterModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 input_table: pa.Table = inputs.get_value_data(\"table\u2026 \u2502 \u2502 filter_array: pa.Array = inputs.get_value_data(\"mask\u2026 \u2502 \u2502 \u2502 \u2502 filtered = input_table.filter(filter_array) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", filtered) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f find_shortest_path \u00b6 \u256d\u2500 Module: find_shortest_path \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.network_analysis.network_analysis.FindShor\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Find the shortest path between two nodes in a graph. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.network_analysis.network_analysis.FindShor\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 mode string Whether to calculate one \u2502 \u2502 shortest path for only one pair \u2502 \u2502 ('single-pair'), or use two node \u2502 \u2502 lists as input and select one of \u2502 \u2502 the following strategies: \u2502 \u2502 shortest path for each pair \u2502 \u2502 ('one-to-one'), the shortest \u2502 \u2502 path to all targets \u2502 \u2502 ('one-to-many'), or a matrix of \u2502 \u2502 all possible combinations \u2502 \u2502 ('many-to-many'). \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 mode = self.get_config_value(\"mode\") \u2502 \u2502 if mode != \"single-pair\": \u2502 \u2502 raise NotImplementedError() \u2502 \u2502 \u2502 \u2502 graph: Graph = inputs.get_value_data(\"graph\") \u2502 \u2502 source: typing.Any = inputs.get_value_data(\"source_n\u2026 \u2502 \u2502 target: typing.Any = inputs.get_value_data(\"target_n\u2026 \u2502 \u2502 \u2502 \u2502 if source not in graph.nodes: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't process shortest path, source '{sour\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 if target not in graph.nodes: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't process shortest path, target '{targ\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 shortest_path = nx.shortest_path(graph, source=sourc\u2026 \u2502 \u2502 outputs.set_value(\"path\", shortest_path) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f graph_properties \u00b6 \u256d\u2500 Module: graph_properties \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.network_analysis.network_analysis.ExtractG\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Extract inherent properties of a network graph. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.network_analysis.network_analysis.ExtractG\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 find_largest_compon\u2026 boolean Find the largest \u2502 \u2502 component of a \u2502 \u2502 graph. \u2502 \u2502 number_of_nodes boolean Count the number of \u2502 \u2502 nodes. \u2502 \u2502 number_of_edges boolean Count the number of \u2502 \u2502 edges \u2502 \u2502 density boolean Calculate the graph \u2502 \u2502 density. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 graph: Graph = inputs.get_value_data(\"graph\") \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"find_largest_component\"): \u2502 \u2502 lc_graph = copy.deepcopy(graph) \u2502 \u2502 # largest_component = max(nx.strongly_connected_\u2026 \u2502 \u2502 lc_graph.remove_nodes_from( \u2502 \u2502 list(nx.isolates(lc_graph)) \u2502 \u2502 ) # remove unconnected nodes from graph \u2502 \u2502 lc_density = nx.density(lc_graph) \u2502 \u2502 outputs.set_values( \u2502 \u2502 largest_component=lc_graph, density_largest_\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"number_of_nodes\"): \u2502 \u2502 outputs.set_values(number_of_nodes=len(graph.nod\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"number_of_edges\"): \u2502 \u2502 outputs.set_values(number_of_edges=len(graph.edg\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"density\"): \u2502 \u2502 density = nx.density(graph) \u2502 \u2502 outputs.set_values(density=density) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f import_local_file \u00b6 \u256d\u2500 Module: import_local_file \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.data_onboarding.ImportLocalFileModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Read a file into the data registry. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.data_onboarding.ImportLocalPathConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 source_is_immutable boolean Whether the data that \u2502 \u2502 lives in source path \u2502 \u2502 can be relied upon to \u2502 \u2502 not change, and \u2502 \u2502 always be available \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 path = inputs.get_value_data(\"path\") \u2502 \u2502 file_model = FileModel.import_file(path) \u2502 \u2502 outputs.set_value(\"file\", file_model) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f import_local_folder \u00b6 \u256d\u2500 Module: import_local_folder \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.data_onboarding.ImportLocalFolderModu\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.data_onboarding.ImportLocalPathConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 source_is_immutable boolean Whether the data that \u2502 \u2502 lives in source path \u2502 \u2502 can be relied upon to \u2502 \u2502 not change, and \u2502 \u2502 always be available \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 path = inputs.get_value_data(\"path\") \u2502 \u2502 \u2502 \u2502 included_files = inputs.get_value_data(\"included_fil\u2026 \u2502 \u2502 excluded_dirs = inputs.get_value_data(\"excluded_dirs\u2026 \u2502 \u2502 \u2502 \u2502 import_config = FolderImportConfig( \u2502 \u2502 include_files=included_files, exclude_dirs=exclu\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 bundle = FileBundleModel.import_folder(source=path, \u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_values(file_bundle=bundle) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f included_in_list_check \u00b6 \u256d\u2500 Module: included_in_list_check \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.lists.IncludedInListCheckModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Check whether an element is in a list. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 item_list = inputs.get_value_data(\"list\") \u2502 \u2502 item = inputs.get_value_data(\"item\") \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"is_included\", item in item_list) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f lda \u00b6 \u256d\u2500 Module: lda \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.language_processing.lda.LDAModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 tokens_array = inputs.get_value_data(\"tokens_array\") \u2502 \u2502 tokens = tokens_array.to_pylist() \u2502 \u2502 num_topics = inputs.get_value_data(\"num_topics\") \u2502 \u2502 \u2502 \u2502 compute_coherence = inputs.get_value_data(\"compute_c\u2026 \u2502 \u2502 id2word = corpora.Dictionary(tokens) \u2502 \u2502 corpus = [id2word.doc2bow(text) for text in tokens] \u2502 \u2502 \u2502 \u2502 model = gensim.models.ldamulticore.LdaMulticore( \u2502 \u2502 corpus, id2word=id2word, num_topics=num_topics, \u2026 \u2502 \u2502 ) \u2502 \u2502 topic_print_model = model.print_topics(num_words=30) \u2502 \u2502 \u2502 \u2502 if not compute_coherence: \u2502 \u2502 df = pd.DataFrame(topic_print_model, columns=[\"t\u2026 \u2502 \u2502 # TODO: create table directly \u2502 \u2502 result = Table.from_pandas(df) \u2502 \u2502 else: \u2502 \u2502 result = self.compute_with_coherence( \u2502 \u2502 corpus=corpus, id2word=id2word, corpus_model\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"topic_model\", result) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f lemmatize \u00b6 \u256d\u2500 Module: lemmatize \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.language_processing.lemmatize.LemmatizeTok\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Lemmatize an array of token lists. \u2502 \u2502 \u2502 \u2502 Compared to using the ``lemmatize_tokens`` module in \u2502 \u2502 combination with ``map``, this is much faster, since it \u2502 \u2502 uses \u2502 \u2502 a spacy (https://spacy.io/api/language#pipe) under the \u2502 \u2502 hood. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 tokens: pa.Array = inputs.get_value_data(\"tokens_arr\u2026 \u2502 \u2502 \u2502 \u2502 # TODO: install this on demand? \u2502 \u2502 import it_core_news_sm \u2502 \u2502 \u2502 \u2502 it_nlp = it_core_news_sm.load(disable=[\"tagger\", \"pa\u2026 \u2502 \u2502 \u2502 \u2502 class CustomTokenizer(DummyTokenizer): \u2502 \u2502 def __init__(self, vocab): \u2502 \u2502 self.vocab = vocab \u2502 \u2502 \u2502 \u2502 def __call__(self, words): \u2502 \u2502 return Doc(self.vocab, words=words) \u2502 \u2502 \u2502 \u2502 it_nlp.tokenizer = CustomTokenizer(it_nlp.vocab) \u2502 \u2502 result = [] \u2502 \u2502 \u2502 \u2502 for doc in it_nlp.pipe( \u2502 \u2502 tokens.to_pylist(), \u2502 \u2502 batch_size=32, \u2502 \u2502 n_process=3, \u2502 \u2502 disable=[\"parser\", \"ner\", \"tagger\"], \u2502 \u2502 ): \u2502 \u2502 result.append([tok.lemma_ for tok in doc]) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"tokens_array\", pa.array(result)) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f lemmatize_single \u00b6 \u256d\u2500 Module: lemmatize_single \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.language_processing.lemmatize.LemmatizeTok\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Lemmatize a single token list. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 tokens = inputs.get_value_data(\"tokens_array\") \u2502 \u2502 print(f\"LEMMA: {tokens[0: 20]}\") \u2502 \u2502 \u2502 \u2502 # TODO: install this on demand? \u2502 \u2502 import it_core_news_sm \u2502 \u2502 \u2502 \u2502 it_nlp = it_core_news_sm.load(disable=[\"tagger\", \"pa\u2026 \u2502 \u2502 \u2502 \u2502 lemmatized_doc = [] \u2502 \u2502 for w in tokens: \u2502 \u2502 w_lemma = [token.lemma_ for token in it_nlp(w)] \u2502 \u2502 lemmatized_doc.append(w_lemma[0]) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"tokens_array\", lemmatized_doc) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f map \u00b6 \u256d\u2500 Module: map \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.array_data.MapModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Map a list of values into another list of values. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.array_data.MapModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 module_type string The name of the kiara module \u2502 \u2502 to use to filter the input \u2502 \u2502 data. \u2502 \u2502 module_config object The config for the kiara \u2502 \u2502 filter module. \u2502 \u2502 input_name string The name of the input name \u2502 \u2502 of the module which will \u2502 \u2502 receive the items from our \u2502 \u2502 input array. Can be omitted \u2502 \u2502 if the configured module \u2502 \u2502 only has a single input. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 input_array: pa.Array = inputs.get_value_data(\"array\u2026 \u2502 \u2502 \u2502 \u2502 module_name = self.get_config_value(\"module_type\") \u2502 \u2502 module_config = self.get_config_value(\"module_config\u2026 \u2502 \u2502 module_obj: KiaraModule = self._kiara.create_module( \u2502 \u2502 \"_map_module\", module_name, module_config=module\u2026 \u2502 \u2502 ) \u2502 \u2502 # TODO: validate that the selected module is appropr\u2026 \u2502 \u2502 assert len(list(module_obj.output_names)) == 1 \u2502 \u2502 \u2502 \u2502 module_output_name = list(module_obj.output_names)[0] \u2502 \u2502 \u2502 \u2502 init_data: typing.Dict[str, typing.Any] = {} \u2502 \u2502 for input_name in self.input_schemas.keys(): \u2502 \u2502 if input_name in [\"array\", self.module_input_nam\u2026 \u2502 \u2502 continue \u2502 \u2502 \u2502 \u2502 init_data[input_name] = inputs.get_value_obj(inp\u2026 \u2502 \u2502 \u2502 \u2502 multi_threaded = False \u2502 \u2502 if multi_threaded: \u2502 \u2502 \u2502 \u2502 def run_module(item): \u2502 \u2502 _d = copy.copy(init_data) \u2502 \u2502 assert self._module_input_name is not None \u2502 \u2502 _d[self._module_input_name] = item \u2502 \u2502 r = module_obj.run(**_d) \u2502 \u2502 return r.get_all_value_data() \u2502 \u2502 \u2502 \u2502 executor = ThreadPoolExecutor() \u2502 \u2502 results: typing.Any = executor.map(run_module, i\u2026 \u2502 \u2502 executor.shutdown(wait=True) \u2502 \u2502 \u2502 \u2502 else: \u2502 \u2502 results = [] \u2502 \u2502 for item in input_array: \u2502 \u2502 _d = copy.copy(init_data) \u2502 \u2502 assert self._module_input_name is not None \u2502 \u2502 _d[self._module_input_name] = item \u2502 \u2502 r = module_obj.run(**_d) \u2502 \u2502 results.append(r.get_all_value_data()) \u2502 \u2502 \u2502 \u2502 result_list = [] \u2502 \u2502 result_types = set() \u2502 \u2502 for r in results: \u2502 \u2502 r_item = r[module_output_name] # type: ignore \u2502 \u2502 result_list.append(r_item) \u2502 \u2502 result_types.add(type(r_item)) \u2502 \u2502 \u2502 \u2502 assert len(result_types) == 1 \u2502 \u2502 outputs.set_value(\"array\", pa.array(result_list)) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f match_regex \u00b6 \u256d\u2500 Module: match_regex \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.strings.RegexModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Check whether the input string matches a provided regular \u2502 \u2502 expression. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.strings.RegexModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 regex string The regex to apply. \u2502 \u2502 only_first_match boolean Whether to only return \u2502 \u2502 the first match, or all \u2502 \u2502 matches. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 text = inputs.get_value_data(\"text\") \u2502 \u2502 regex = self.get_config_value(\"regex\") \u2502 \u2502 matches = re.findall(regex, text) \u2502 \u2502 \u2502 \u2502 if not matches: \u2502 \u2502 raise KiaraProcessingException(f\"No match for re\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"only_first_match\"): \u2502 \u2502 result = matches[0] \u2502 \u2502 else: \u2502 \u2502 result = matches \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"text\", result) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f merge_table \u00b6 \u256d\u2500 Module: merge_table \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.tabular_data.MergeTableModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 sources = inputs.get_value_data(\"sources\") \u2502 \u2502 \u2502 \u2502 len_dict = {} \u2502 \u2502 arrays = [] \u2502 \u2502 column_names = [] \u2502 \u2502 for source_key, table_or_column in sources.items(): \u2502 \u2502 \u2502 \u2502 if isinstance(table_or_column, pa.Table): \u2502 \u2502 rows = table_or_column.num_rows \u2502 \u2502 for name in table_or_column.schema.names: \u2502 \u2502 column = table_or_column.column(name) \u2502 \u2502 arrays.append(column) \u2502 \u2502 column_names.append(name) \u2502 \u2502 \u2502 \u2502 elif isinstance(table_or_column, pa.Array): \u2502 \u2502 rows = len(table_or_column) \u2502 \u2502 arrays.append(table_or_column) \u2502 \u2502 column_names.append(source_key) \u2502 \u2502 else: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't merge table: invalid type '{type\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 len_dict[source_key] = rows \u2502 \u2502 \u2502 \u2502 all_rows = None \u2502 \u2502 for source_key, rows in len_dict.items(): \u2502 \u2502 if all_rows is None: \u2502 \u2502 all_rows = rows \u2502 \u2502 else: \u2502 \u2502 if all_rows != rows: \u2502 \u2502 all_rows = None \u2502 \u2502 break \u2502 \u2502 \u2502 \u2502 if all_rows is None: \u2502 \u2502 len_str = \"\" \u2502 \u2502 for name, rows in len_dict.items(): \u2502 \u2502 len_str = f\" {name} ({rows})\" \u2502 \u2502 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't merge table, sources have different \u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 table = pa.Table.from_arrays(arrays=arrays, names=co\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", table) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f not \u00b6 \u256d\u2500 Module: not \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.logic_gates.NotModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Negates the input. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.logic_gates.LogicProcessingModuleConf\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 delay number the delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 output is returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \"\"\"Negates the input boolean.\"\"\" \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # type: ignore \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"y\", not inputs.get_value_data(\"a\"\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f or \u00b6 \u256d\u2500 Module: or \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.logic_gates.OrModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if one of the inputs is 'True'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.logic_gates.LogicProcessingModuleConf\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 delay number the delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 output is returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # type: ignore \u2502 \u2502 outputs.set_value(\"y\", inputs.get_value_data(\"a\") or\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f playground_example \u00b6 \u256d\u2500 Module: playground_example \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.playground.playground.ExampleModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc A very simple example module; concatenate two strings. \u2502 \u2502 \u2502 \u2502 The purpose of this modules is to show the main elements \u2502 \u2502 of a ``KiaraModule``: \u2502 \u2502 \u2502 \u2502 the (optional) configuration \u2502 \u2502 : must inherit from ``KiaraModuleConfig``, and the \u2502 \u2502 config class must be set as the \"_config_cls\" attribute \u2502 \u2502 on the ``KiaraModule`` class. Configuration values \u2502 \u2502 can be retrieved via the ``self.get_config_value(key)`` \u2502 \u2502 method \u2502 \u2502 \u2502 \u2502 the inputs description \u2502 \u2502 : must return a dictionary, containing the input \u2502 \u2502 name(s) as keys, and another dictionary containing type \u2502 \u2502 information \u2502 \u2502 and documentation about the input data as value \u2502 \u2502 \u2502 \u2502 the outputs description \u2502 \u2502 : must return a dictionary, containing the output \u2502 \u2502 name(s) as keys, and another dictionary containing type \u2502 \u2502 information \u2502 \u2502 and documentation about the output data as value \u2502 \u2502 \u2502 \u2502 the ``process`` method \u2502 \u2502 : this is where the actual work gets done. Input data \u2502 \u2502 can be accessed via ``inputs.get_value_data(key)``, \u2502 \u2502 results \u2502 \u2502 can be set with the ``outputs.set_value(key, \u2502 \u2502 value)`` method \u2502 \u2502 \u2502 \u2502 Examples: \u2502 \u2502 \u2502 \u2502 This example module can be tested on the commandline \u2502 \u2502 with the ``kiara run`` command: \u2502 \u2502 \u2502 \u2502 ``` \u2502 \u2502 kiara run playground_example text_1=\"xxx\" \u2502 \u2502 text_2=\"yyy\" \u2502 \u2502 ``` \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.playground.playground.ExampleModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 separator string The seperator between the two \u2502 \u2502 strings. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 separator = self.get_config_value(\"separator\") \u2502 \u2502 \u2502 \u2502 text_1 = inputs.get_value_data(\"text_1\") \u2502 \u2502 text_2 = inputs.get_value_data(\"text_2\") \u2502 \u2502 \u2502 \u2502 result = text_1 + separator + text_2 \u2502 \u2502 outputs.set_value(\"text\", result) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f pretty_print \u00b6 \u256d\u2500 Module: pretty_print \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.strings.PrettyPrintModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 value_type = inputs.get_value_obj(\"item\").type_name \u2502 \u2502 input_value: Value = inputs.get_value_data(\"item\") \u2502 \u2502 \u2502 \u2502 max_lines = inputs.get_value_data(\"max_lines\") \u2502 \u2502 \u2502 \u2502 if value_type == \"table\": \u2502 \u2502 \u2502 \u2502 half_lines: typing.Optional[int] = None \u2502 \u2502 if max_lines: \u2502 \u2502 half_lines = int(max_lines / 2) \u2502 \u2502 \u2502 \u2502 input_value_str = pretty_print_arrow_table( \u2502 \u2502 input_value, num_head=half_lines, num_tail=h\u2026 \u2502 \u2502 ) \u2502 \u2502 else: \u2502 \u2502 input_value_str = pformat(input_value) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"pretty_string\", input_value_str) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f remove_stopwords \u00b6 \u256d\u2500 Module: remove_stopwords \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.language_processing.tokenize.RemoveStopwor\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 custom_stopwords = inputs.get_value_data(\"additional\u2026 \u2502 \u2502 languages = inputs.get_value_data(\"languages\") \u2502 \u2502 if isinstance(languages, str): \u2502 \u2502 languages = [languages] \u2502 \u2502 \u2502 \u2502 stopwords = set() \u2502 \u2502 if languages: \u2502 \u2502 for language in languages: \u2502 \u2502 if language not in get_stopwords().fileids(): \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Invalid language: {language}. Avai\u2026 \u2502 \u2502 ) \u2502 \u2502 stopwords.update(get_stopwords().words(langu\u2026 \u2502 \u2502 \u2502 \u2502 if custom_stopwords: \u2502 \u2502 stopwords.update(custom_stopwords) \u2502 \u2502 \u2502 \u2502 if not stopwords: \u2502 \u2502 outputs.set_value(\"token_list\", inputs.get_value\u2026 \u2502 \u2502 return \u2502 \u2502 \u2502 \u2502 token_lists = inputs.get_value_data(\"token_lists\") \u2502 \u2502 \u2502 \u2502 if hasattr(token_lists, \"to_pylist\"): \u2502 \u2502 token_lists = token_lists.to_pylist() \u2502 \u2502 \u2502 \u2502 result = [] \u2502 \u2502 for token_list in token_lists: \u2502 \u2502 \u2502 \u2502 cleaned_list = [x for x in token_list if x not i\u2026 \u2502 \u2502 result.append(cleaned_list) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"token_list\", pa.array(result)) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f replace_string \u00b6 \u256d\u2500 Module: replace_string \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.strings.ReplaceStringModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.strings.ReplaceModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 replacement_map object A map, containing the \u2502 \u2502 strings to be replaced as \u2502 \u2502 keys, and the replacements \u2502 \u2502 as values. \u2502 \u2502 default_value string The default value to use \u2502 \u2502 if the string to be \u2502 \u2502 replaced is not in the \u2502 \u2502 replacement map. By \u2502 \u2502 default, this just returns \u2502 \u2502 the string itself. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 text = inputs.get_value_data(\"text\") \u2502 \u2502 repl_map = self.get_config_value(\"replacement_map\") \u2502 \u2502 default = self.get_config_value(\"default_value\") \u2502 \u2502 \u2502 \u2502 if text not in repl_map.keys(): \u2502 \u2502 if default is None: \u2502 \u2502 result = text \u2502 \u2502 else: \u2502 \u2502 result = default \u2502 \u2502 else: \u2502 \u2502 result = repl_map[text] \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"text\", result) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f tokenize_text \u00b6 \u256d\u2500 Module: tokenize_text \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.language_processing.tokenize.TokenizeTextM\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.language_processing.tokenize.TokenizeTextC\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 filter_non_alpha boolean Whether to filter out \u2502 \u2502 non alpha tokens. \u2502 \u2502 min_token_length integer The minimum token \u2502 \u2502 length. \u2502 \u2502 to_lowercase boolean Whether to lowercase the \u2502 \u2502 tokens. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 # TODO: module-independent caching? \u2502 \u2502 \u2502 \u2502 # language = inputs.get_value_data(\"language\") \u2502 \u2502 # \u2502 \u2502 text = inputs.get_value_data(\"text\") \u2502 \u2502 tokenized = nltk.word_tokenize(text) \u2502 \u2502 \u2502 \u2502 result = tokenized \u2502 \u2502 if self.get_config_value(\"min_token_length\") > 0: \u2502 \u2502 result = ( \u2502 \u2502 x \u2502 \u2502 for x in tokenized \u2502 \u2502 if len(x) >= self.get_config_value(\"min_toke\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"filter_non_alpha\"): \u2502 \u2502 result = (x for x in result if x.isalpha()) \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"to_lowercase\"): \u2502 \u2502 result = (x.lower() for x in result) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"token_list\", list(result)) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Included modules"},{"location":"modules_list/#available-module-types","text":"This page contains a list of all available Kiara module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Available module types"},{"location":"modules_list/#add_nodes_to_network_graph","text":"\u256d\u2500 Module: add_nodes_to_network_graph \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.network_analysis.network_analysis.AddNodes\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Add nodes to an existing graph. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 nodes_table_value = inputs.get_value_obj(\"node_attri\u2026 \u2502 \u2502 \u2502 \u2502 if nodes_table_value.is_none: \u2502 \u2502 # we return the graph as is \u2502 \u2502 # we are using the 'get_value_obj' method, becau\u2026 \u2502 \u2502 # actual data at all \u2502 \u2502 outputs.set_value(\"graph\", inputs.get_value_obj(\u2026 \u2502 \u2502 return \u2502 \u2502 \u2502 \u2502 input_graph: Graph = inputs.get_value_data(\"graph\") \u2502 \u2502 graph: Graph = copy.deepcopy(input_graph) \u2502 \u2502 \u2502 \u2502 nodes_table_obj: pyarrow.Table = nodes_table_value.g\u2026 \u2502 \u2502 nodes_table_index = inputs.get_value_data(\"index_col\u2026 \u2502 \u2502 \u2502 \u2502 attr_dict = ( \u2502 \u2502 nodes_table_obj.to_pandas() \u2502 \u2502 .set_index(nodes_table_index) \u2502 \u2502 .to_dict(\"index\") \u2502 \u2502 .items() \u2502 \u2502 ) \u2502 \u2502 graph.add_nodes_from(attr_dict) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"graph\", graph) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"add_nodes_to_network_graph"},{"location":"modules_list/#and","text":"\u256d\u2500 Module: and \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.logic_gates.AndModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if both inputs are 'True'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.logic_gates.LogicProcessingModuleConf\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 delay number the delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 output is returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.delay) # type: ignore \u2502 \u2502 \u2502 \u2502 outputs.set_value( \u2502 \u2502 \"y\", inputs.get_value_data(\"a\") and inputs.get_v\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"and"},{"location":"modules_list/#augment_network_graph","text":"\u256d\u2500 Module: augment_network_graph \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.network_analysis.network_analysis.AugmentN\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Augment an existing graph with node attributes. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 nodes_table_value = inputs.get_value_obj(\"node_attri\u2026 \u2502 \u2502 \u2502 \u2502 if nodes_table_value.is_none or not nodes_table_valu\u2026 \u2502 \u2502 # we return the graph as is \u2502 \u2502 # we are using the 'get_value_obj' method, becau\u2026 \u2502 \u2502 # actual data at all \u2502 \u2502 outputs.set_value(\"graph\", inputs.get_value_obj(\u2026 \u2502 \u2502 return \u2502 \u2502 \u2502 \u2502 input_graph: Graph = inputs.get_value_data(\"graph\") \u2502 \u2502 graph: Graph = copy.deepcopy(input_graph) \u2502 \u2502 \u2502 \u2502 nodes_table_obj: pyarrow.Table = nodes_table_value.g\u2026 \u2502 \u2502 nodes_table_index = inputs.get_value_data(\"index_col\u2026 \u2502 \u2502 if nodes_table_index not in nodes_table_obj.column_n\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Node attribute table does not have a colum\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 attr_dict = ( \u2502 \u2502 nodes_table_obj.to_pandas() \u2502 \u2502 .set_index(nodes_table_index) \u2502 \u2502 .to_dict(\"index\") \u2502 \u2502 .items() \u2502 \u2502 ) \u2502 \u2502 graph.add_nodes_from(attr_dict) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"graph\", graph) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"augment_network_graph"},{"location":"modules_list/#create_graph_from_edges_table","text":"\u256d\u2500 Module: create_graph_from_edges_table \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.network_analysis.network_analysis.CreateGr\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Create a directed network graph object from tabular data. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.network_analysis.network_analysis.CreateGr\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 graph_type string The type of the graph. If not \u2502 \u2502 specified, a 'graph_type' input \u2502 \u2502 field will be added which will \u2502 \u2502 default to 'directed'. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"graph_type\") is not None: \u2502 \u2502 _graph_type = self.get_config_value(\"graph_type\") \u2502 \u2502 else: \u2502 \u2502 _graph_type = inputs.get_value_data(\"graph_type\") \u2502 \u2502 \u2502 \u2502 graph_type = GraphTypesEnum[_graph_type] \u2502 \u2502 \u2502 \u2502 edges_table_value = inputs.get_value_obj(\"edges_tabl\u2026 \u2502 \u2502 edges_table_obj: pyarrow.Table = edges_table_value.g\u2026 \u2502 \u2502 \u2502 \u2502 source_column = inputs.get_value_data(\"source_column\u2026 \u2502 \u2502 target_column = inputs.get_value_data(\"target_column\u2026 \u2502 \u2502 weight_column = inputs.get_value_data(\"weight_column\u2026 \u2502 \u2502 \u2502 \u2502 errors = [] \u2502 \u2502 if source_column not in edges_table_obj.column_names: \u2502 \u2502 errors.append(source_column) \u2502 \u2502 if target_column not in edges_table_obj.column_names: \u2502 \u2502 errors.append(target_column) \u2502 \u2502 if weight_column not in edges_table_obj.column_names: \u2502 \u2502 errors.append(weight_column) \u2502 \u2502 \u2502 \u2502 if errors: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't create network graph, source table m\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 min_table = edges_table_obj.select( \u2502 \u2502 (source_column, target_column, weight_column) \u2502 \u2502 ) \u2502 \u2502 pandas_table = min_table.to_pandas() \u2502 \u2502 \u2502 \u2502 if graph_type != GraphTypesEnum.directed: \u2502 \u2502 raise NotImplementedError(\"Only 'directed' graph\u2026 \u2502 \u2502 graph_cls = nx.DiGraph \u2502 \u2502 \u2502 \u2502 graph: nx.DiGraph = nx.from_pandas_edgelist( \u2502 \u2502 pandas_table, \u2502 \u2502 source_column, \u2502 \u2502 target_column, \u2502 \u2502 edge_attr=True, \u2502 \u2502 create_using=graph_cls, \u2502 \u2502 ) \u2502 \u2502 outputs.set_value(\"graph\", graph) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"create_graph_from_edges_table"},{"location":"modules_list/#create_table_from_file","text":"\u256d\u2500 Module: create_table_from_file \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.tabular_data.CreateTableFromFileModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Import table-like data from an item in the data registry. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.tabular_data.CreateTableModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 allow_column_filter boolean Whether to add an \u2502 \u2502 input option to \u2502 \u2502 filter columns. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 input_file: FileModel = inputs.get_value_data(\"file\") \u2502 \u2502 imported_data = csv.read_csv(input_file.path) \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"allow_column_filter\"): \u2502 \u2502 if self.get_config_value(\"columns\"): \u2502 \u2502 imported_data = imported_data.select( \u2502 \u2502 self.get_config_value(\"only_columns\") \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", imported_data) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"create_table_from_file"},{"location":"modules_list/#create_table_from_text_files","text":"\u256d\u2500 Module: create_table_from_text_files \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.tabular_data.CreateTableFromTextFiles\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.tabular_data.CreateTableFromTextFiles\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 columns array A list of columns to add to the \u2502 \u2502 table. Available properties: id, \u2502 \u2502 rel_path, orig_filename, \u2502 \u2502 orig_path, import_time, \u2502 \u2502 mime_type, size, content, path, \u2502 \u2502 file_name \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 bundle: FileBundleModel = inputs.get_value_data(\"fil\u2026 \u2502 \u2502 \u2502 \u2502 columns = self.get_config_value(\"columns\") \u2502 \u2502 if not columns: \u2502 \u2502 columns = DEFAULT_COLUMNS \u2502 \u2502 \u2502 \u2502 if \"content\" in columns: \u2502 \u2502 file_dict = bundle.read_text_file_contents() \u2502 \u2502 else: \u2502 \u2502 file_dict = {} \u2502 \u2502 for rel_path in bundle.included_files.keys(): \u2502 \u2502 file_dict[rel_path] = None # type: ignore \u2502 \u2502 \u2502 \u2502 tabular: typing.Dict[str, typing.List[typing.Any]] =\u2026 \u2502 \u2502 for column in columns: \u2502 \u2502 for index, rel_path in enumerate(sorted(file_dic\u2026 \u2502 \u2502 \u2502 \u2502 if column == \"content\": \u2502 \u2502 value: typing.Any = file_dict[rel_path] \u2502 \u2502 elif column == \"id\": \u2502 \u2502 value = index \u2502 \u2502 elif column == \"rel_path\": \u2502 \u2502 value = rel_path \u2502 \u2502 else: \u2502 \u2502 file_model = bundle.included_files[rel_p\u2026 \u2502 \u2502 value = getattr(file_model, column) \u2502 \u2502 \u2502 \u2502 tabular.setdefault(column, []).append(value) \u2502 \u2502 \u2502 \u2502 table = pa.Table.from_pydict(tabular) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", table) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"create_table_from_text_files"},{"location":"modules_list/#date_range_check","text":"\u256d\u2500 Module: date_range_check \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.dates.DateRangeCheckModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Check whether a date falls within a specified date range. \u2502 \u2502 \u2502 \u2502 At least one of the inputs 'earliest' or 'latest' must be \u2502 \u2502 set, it's allowed to set both, though. \u2502 \u2502 \u2502 \u2502 Return ``True`` if that's the case, otherwise ``False``. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 d = inputs.get_value_data(\"date\") \u2502 \u2502 earliest: typing.Optional[datetime.datetime] = input\u2026 \u2502 \u2502 latest: typing.Optional[datetime.datetime] = inputs.\u2026 \u2502 \u2502 \u2502 \u2502 if hasattr(d, \"as_py\"): \u2502 \u2502 d = d.as_py() \u2502 \u2502 \u2502 \u2502 if not earliest and not latest: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 \"Can't process date range check: need at lea\u2026 \u2502 \u2502 ) \u2502 \u2502 elif earliest and latest: \u2502 \u2502 matches = earliest <= d <= latest \u2502 \u2502 elif earliest: \u2502 \u2502 matches = earliest <= d \u2502 \u2502 else: \u2502 \u2502 matches = d <= latest \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"within_range\", matches) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"date_range_check"},{"location":"modules_list/#dummy","text":"\u256d\u2500 Module: dummy \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.dev.DummyModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Module that simulates processing, but uses hard-coded \u2502 \u2502 outputs as a result. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.dev.DummyProcessingModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 doc string -- n/a -- \u2502 \u2502 input_schema object The input schema for this \u2502 \u2502 module. \u2502 \u2502 output_schema object The output schema for this \u2502 \u2502 module. \u2502 \u2502 outputs object The (dummy) output for this \u2502 \u2502 module. \u2502 \u2502 delay number The delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 (dummy) outputs are \u2502 \u2502 returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \"\"\"Returns the hardcoded output values that are set \u2026 \u2502 \u2502 \u2502 \u2502 Optionally, this module can simulate processing by w\u2026 \u2502 \u2502 \"\"\" \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # type: ignore \u2502 \u2502 \u2502 \u2502 output_values: typing.Mapping = self.config.get(\"out\u2026 \u2502 \u2502 \u2502 \u2502 value_dict = {} \u2502 \u2502 for output_name in self.output_names: \u2502 \u2502 if output_name not in output_values.keys(): \u2502 \u2502 raise NotImplementedError() \u2502 \u2502 # v = self.output_schemas[output_name].type_\u2026 \u2502 \u2502 # value_dict[output_name] = v \u2502 \u2502 else: \u2502 \u2502 value_dict[output_name] = output_values[outp\u2026 \u2502 \u2502 outputs.set_values(**value_dict) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"dummy"},{"location":"modules_list/#extract_date","text":"\u256d\u2500 Module: extract_date \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.dates.ExtractDateModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 text = inputs.get_value_data(\"text\") \u2502 \u2502 \u2502 \u2502 date_match = re.findall(r\"_(\\d{4}-\\d{2}-\\d{2})_\", te\u2026 \u2502 \u2502 assert date_match \u2502 \u2502 \u2502 \u2502 d_obj = parser.parse(date_match[0]) # type: ignore \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"date\", d_obj) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"extract_date"},{"location":"modules_list/#filter_table","text":"\u256d\u2500 Module: filter_table \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.tabular_data.FilterTableModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.tabular_data.TableFilterModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 input_table: pa.Table = inputs.get_value_data(\"table\u2026 \u2502 \u2502 filter_array: pa.Array = inputs.get_value_data(\"mask\u2026 \u2502 \u2502 \u2502 \u2502 filtered = input_table.filter(filter_array) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", filtered) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"filter_table"},{"location":"modules_list/#find_shortest_path","text":"\u256d\u2500 Module: find_shortest_path \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.network_analysis.network_analysis.FindShor\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Find the shortest path between two nodes in a graph. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.network_analysis.network_analysis.FindShor\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 mode string Whether to calculate one \u2502 \u2502 shortest path for only one pair \u2502 \u2502 ('single-pair'), or use two node \u2502 \u2502 lists as input and select one of \u2502 \u2502 the following strategies: \u2502 \u2502 shortest path for each pair \u2502 \u2502 ('one-to-one'), the shortest \u2502 \u2502 path to all targets \u2502 \u2502 ('one-to-many'), or a matrix of \u2502 \u2502 all possible combinations \u2502 \u2502 ('many-to-many'). \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 mode = self.get_config_value(\"mode\") \u2502 \u2502 if mode != \"single-pair\": \u2502 \u2502 raise NotImplementedError() \u2502 \u2502 \u2502 \u2502 graph: Graph = inputs.get_value_data(\"graph\") \u2502 \u2502 source: typing.Any = inputs.get_value_data(\"source_n\u2026 \u2502 \u2502 target: typing.Any = inputs.get_value_data(\"target_n\u2026 \u2502 \u2502 \u2502 \u2502 if source not in graph.nodes: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't process shortest path, source '{sour\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 if target not in graph.nodes: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't process shortest path, target '{targ\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 shortest_path = nx.shortest_path(graph, source=sourc\u2026 \u2502 \u2502 outputs.set_value(\"path\", shortest_path) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"find_shortest_path"},{"location":"modules_list/#graph_properties","text":"\u256d\u2500 Module: graph_properties \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.network_analysis.network_analysis.ExtractG\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Extract inherent properties of a network graph. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.network_analysis.network_analysis.ExtractG\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 find_largest_compon\u2026 boolean Find the largest \u2502 \u2502 component of a \u2502 \u2502 graph. \u2502 \u2502 number_of_nodes boolean Count the number of \u2502 \u2502 nodes. \u2502 \u2502 number_of_edges boolean Count the number of \u2502 \u2502 edges \u2502 \u2502 density boolean Calculate the graph \u2502 \u2502 density. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 graph: Graph = inputs.get_value_data(\"graph\") \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"find_largest_component\"): \u2502 \u2502 lc_graph = copy.deepcopy(graph) \u2502 \u2502 # largest_component = max(nx.strongly_connected_\u2026 \u2502 \u2502 lc_graph.remove_nodes_from( \u2502 \u2502 list(nx.isolates(lc_graph)) \u2502 \u2502 ) # remove unconnected nodes from graph \u2502 \u2502 lc_density = nx.density(lc_graph) \u2502 \u2502 outputs.set_values( \u2502 \u2502 largest_component=lc_graph, density_largest_\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"number_of_nodes\"): \u2502 \u2502 outputs.set_values(number_of_nodes=len(graph.nod\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"number_of_edges\"): \u2502 \u2502 outputs.set_values(number_of_edges=len(graph.edg\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"density\"): \u2502 \u2502 density = nx.density(graph) \u2502 \u2502 outputs.set_values(density=density) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"graph_properties"},{"location":"modules_list/#import_local_file","text":"\u256d\u2500 Module: import_local_file \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.data_onboarding.ImportLocalFileModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Read a file into the data registry. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.data_onboarding.ImportLocalPathConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 source_is_immutable boolean Whether the data that \u2502 \u2502 lives in source path \u2502 \u2502 can be relied upon to \u2502 \u2502 not change, and \u2502 \u2502 always be available \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 path = inputs.get_value_data(\"path\") \u2502 \u2502 file_model = FileModel.import_file(path) \u2502 \u2502 outputs.set_value(\"file\", file_model) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"import_local_file"},{"location":"modules_list/#import_local_folder","text":"\u256d\u2500 Module: import_local_folder \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.data_onboarding.ImportLocalFolderModu\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.data_onboarding.ImportLocalPathConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 source_is_immutable boolean Whether the data that \u2502 \u2502 lives in source path \u2502 \u2502 can be relied upon to \u2502 \u2502 not change, and \u2502 \u2502 always be available \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 path = inputs.get_value_data(\"path\") \u2502 \u2502 \u2502 \u2502 included_files = inputs.get_value_data(\"included_fil\u2026 \u2502 \u2502 excluded_dirs = inputs.get_value_data(\"excluded_dirs\u2026 \u2502 \u2502 \u2502 \u2502 import_config = FolderImportConfig( \u2502 \u2502 include_files=included_files, exclude_dirs=exclu\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 bundle = FileBundleModel.import_folder(source=path, \u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_values(file_bundle=bundle) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"import_local_folder"},{"location":"modules_list/#included_in_list_check","text":"\u256d\u2500 Module: included_in_list_check \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.lists.IncludedInListCheckModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Check whether an element is in a list. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 item_list = inputs.get_value_data(\"list\") \u2502 \u2502 item = inputs.get_value_data(\"item\") \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"is_included\", item in item_list) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"included_in_list_check"},{"location":"modules_list/#lda","text":"\u256d\u2500 Module: lda \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.language_processing.lda.LDAModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 tokens_array = inputs.get_value_data(\"tokens_array\") \u2502 \u2502 tokens = tokens_array.to_pylist() \u2502 \u2502 num_topics = inputs.get_value_data(\"num_topics\") \u2502 \u2502 \u2502 \u2502 compute_coherence = inputs.get_value_data(\"compute_c\u2026 \u2502 \u2502 id2word = corpora.Dictionary(tokens) \u2502 \u2502 corpus = [id2word.doc2bow(text) for text in tokens] \u2502 \u2502 \u2502 \u2502 model = gensim.models.ldamulticore.LdaMulticore( \u2502 \u2502 corpus, id2word=id2word, num_topics=num_topics, \u2026 \u2502 \u2502 ) \u2502 \u2502 topic_print_model = model.print_topics(num_words=30) \u2502 \u2502 \u2502 \u2502 if not compute_coherence: \u2502 \u2502 df = pd.DataFrame(topic_print_model, columns=[\"t\u2026 \u2502 \u2502 # TODO: create table directly \u2502 \u2502 result = Table.from_pandas(df) \u2502 \u2502 else: \u2502 \u2502 result = self.compute_with_coherence( \u2502 \u2502 corpus=corpus, id2word=id2word, corpus_model\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"topic_model\", result) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"lda"},{"location":"modules_list/#lemmatize","text":"\u256d\u2500 Module: lemmatize \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.language_processing.lemmatize.LemmatizeTok\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Lemmatize an array of token lists. \u2502 \u2502 \u2502 \u2502 Compared to using the ``lemmatize_tokens`` module in \u2502 \u2502 combination with ``map``, this is much faster, since it \u2502 \u2502 uses \u2502 \u2502 a spacy (https://spacy.io/api/language#pipe) under the \u2502 \u2502 hood. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 tokens: pa.Array = inputs.get_value_data(\"tokens_arr\u2026 \u2502 \u2502 \u2502 \u2502 # TODO: install this on demand? \u2502 \u2502 import it_core_news_sm \u2502 \u2502 \u2502 \u2502 it_nlp = it_core_news_sm.load(disable=[\"tagger\", \"pa\u2026 \u2502 \u2502 \u2502 \u2502 class CustomTokenizer(DummyTokenizer): \u2502 \u2502 def __init__(self, vocab): \u2502 \u2502 self.vocab = vocab \u2502 \u2502 \u2502 \u2502 def __call__(self, words): \u2502 \u2502 return Doc(self.vocab, words=words) \u2502 \u2502 \u2502 \u2502 it_nlp.tokenizer = CustomTokenizer(it_nlp.vocab) \u2502 \u2502 result = [] \u2502 \u2502 \u2502 \u2502 for doc in it_nlp.pipe( \u2502 \u2502 tokens.to_pylist(), \u2502 \u2502 batch_size=32, \u2502 \u2502 n_process=3, \u2502 \u2502 disable=[\"parser\", \"ner\", \"tagger\"], \u2502 \u2502 ): \u2502 \u2502 result.append([tok.lemma_ for tok in doc]) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"tokens_array\", pa.array(result)) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"lemmatize"},{"location":"modules_list/#lemmatize_single","text":"\u256d\u2500 Module: lemmatize_single \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.language_processing.lemmatize.LemmatizeTok\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Lemmatize a single token list. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 tokens = inputs.get_value_data(\"tokens_array\") \u2502 \u2502 print(f\"LEMMA: {tokens[0: 20]}\") \u2502 \u2502 \u2502 \u2502 # TODO: install this on demand? \u2502 \u2502 import it_core_news_sm \u2502 \u2502 \u2502 \u2502 it_nlp = it_core_news_sm.load(disable=[\"tagger\", \"pa\u2026 \u2502 \u2502 \u2502 \u2502 lemmatized_doc = [] \u2502 \u2502 for w in tokens: \u2502 \u2502 w_lemma = [token.lemma_ for token in it_nlp(w)] \u2502 \u2502 lemmatized_doc.append(w_lemma[0]) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"tokens_array\", lemmatized_doc) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"lemmatize_single"},{"location":"modules_list/#map","text":"\u256d\u2500 Module: map \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.array_data.MapModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Map a list of values into another list of values. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.array_data.MapModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 module_type string The name of the kiara module \u2502 \u2502 to use to filter the input \u2502 \u2502 data. \u2502 \u2502 module_config object The config for the kiara \u2502 \u2502 filter module. \u2502 \u2502 input_name string The name of the input name \u2502 \u2502 of the module which will \u2502 \u2502 receive the items from our \u2502 \u2502 input array. Can be omitted \u2502 \u2502 if the configured module \u2502 \u2502 only has a single input. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 input_array: pa.Array = inputs.get_value_data(\"array\u2026 \u2502 \u2502 \u2502 \u2502 module_name = self.get_config_value(\"module_type\") \u2502 \u2502 module_config = self.get_config_value(\"module_config\u2026 \u2502 \u2502 module_obj: KiaraModule = self._kiara.create_module( \u2502 \u2502 \"_map_module\", module_name, module_config=module\u2026 \u2502 \u2502 ) \u2502 \u2502 # TODO: validate that the selected module is appropr\u2026 \u2502 \u2502 assert len(list(module_obj.output_names)) == 1 \u2502 \u2502 \u2502 \u2502 module_output_name = list(module_obj.output_names)[0] \u2502 \u2502 \u2502 \u2502 init_data: typing.Dict[str, typing.Any] = {} \u2502 \u2502 for input_name in self.input_schemas.keys(): \u2502 \u2502 if input_name in [\"array\", self.module_input_nam\u2026 \u2502 \u2502 continue \u2502 \u2502 \u2502 \u2502 init_data[input_name] = inputs.get_value_obj(inp\u2026 \u2502 \u2502 \u2502 \u2502 multi_threaded = False \u2502 \u2502 if multi_threaded: \u2502 \u2502 \u2502 \u2502 def run_module(item): \u2502 \u2502 _d = copy.copy(init_data) \u2502 \u2502 assert self._module_input_name is not None \u2502 \u2502 _d[self._module_input_name] = item \u2502 \u2502 r = module_obj.run(**_d) \u2502 \u2502 return r.get_all_value_data() \u2502 \u2502 \u2502 \u2502 executor = ThreadPoolExecutor() \u2502 \u2502 results: typing.Any = executor.map(run_module, i\u2026 \u2502 \u2502 executor.shutdown(wait=True) \u2502 \u2502 \u2502 \u2502 else: \u2502 \u2502 results = [] \u2502 \u2502 for item in input_array: \u2502 \u2502 _d = copy.copy(init_data) \u2502 \u2502 assert self._module_input_name is not None \u2502 \u2502 _d[self._module_input_name] = item \u2502 \u2502 r = module_obj.run(**_d) \u2502 \u2502 results.append(r.get_all_value_data()) \u2502 \u2502 \u2502 \u2502 result_list = [] \u2502 \u2502 result_types = set() \u2502 \u2502 for r in results: \u2502 \u2502 r_item = r[module_output_name] # type: ignore \u2502 \u2502 result_list.append(r_item) \u2502 \u2502 result_types.add(type(r_item)) \u2502 \u2502 \u2502 \u2502 assert len(result_types) == 1 \u2502 \u2502 outputs.set_value(\"array\", pa.array(result_list)) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"map"},{"location":"modules_list/#match_regex","text":"\u256d\u2500 Module: match_regex \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.strings.RegexModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Check whether the input string matches a provided regular \u2502 \u2502 expression. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.strings.RegexModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 regex string The regex to apply. \u2502 \u2502 only_first_match boolean Whether to only return \u2502 \u2502 the first match, or all \u2502 \u2502 matches. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 text = inputs.get_value_data(\"text\") \u2502 \u2502 regex = self.get_config_value(\"regex\") \u2502 \u2502 matches = re.findall(regex, text) \u2502 \u2502 \u2502 \u2502 if not matches: \u2502 \u2502 raise KiaraProcessingException(f\"No match for re\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"only_first_match\"): \u2502 \u2502 result = matches[0] \u2502 \u2502 else: \u2502 \u2502 result = matches \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"text\", result) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"match_regex"},{"location":"modules_list/#merge_table","text":"\u256d\u2500 Module: merge_table \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.tabular_data.MergeTableModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 sources = inputs.get_value_data(\"sources\") \u2502 \u2502 \u2502 \u2502 len_dict = {} \u2502 \u2502 arrays = [] \u2502 \u2502 column_names = [] \u2502 \u2502 for source_key, table_or_column in sources.items(): \u2502 \u2502 \u2502 \u2502 if isinstance(table_or_column, pa.Table): \u2502 \u2502 rows = table_or_column.num_rows \u2502 \u2502 for name in table_or_column.schema.names: \u2502 \u2502 column = table_or_column.column(name) \u2502 \u2502 arrays.append(column) \u2502 \u2502 column_names.append(name) \u2502 \u2502 \u2502 \u2502 elif isinstance(table_or_column, pa.Array): \u2502 \u2502 rows = len(table_or_column) \u2502 \u2502 arrays.append(table_or_column) \u2502 \u2502 column_names.append(source_key) \u2502 \u2502 else: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't merge table: invalid type '{type\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 len_dict[source_key] = rows \u2502 \u2502 \u2502 \u2502 all_rows = None \u2502 \u2502 for source_key, rows in len_dict.items(): \u2502 \u2502 if all_rows is None: \u2502 \u2502 all_rows = rows \u2502 \u2502 else: \u2502 \u2502 if all_rows != rows: \u2502 \u2502 all_rows = None \u2502 \u2502 break \u2502 \u2502 \u2502 \u2502 if all_rows is None: \u2502 \u2502 len_str = \"\" \u2502 \u2502 for name, rows in len_dict.items(): \u2502 \u2502 len_str = f\" {name} ({rows})\" \u2502 \u2502 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't merge table, sources have different \u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 table = pa.Table.from_arrays(arrays=arrays, names=co\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", table) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"merge_table"},{"location":"modules_list/#not","text":"\u256d\u2500 Module: not \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.logic_gates.NotModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Negates the input. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.logic_gates.LogicProcessingModuleConf\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 delay number the delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 output is returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \"\"\"Negates the input boolean.\"\"\" \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # type: ignore \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"y\", not inputs.get_value_data(\"a\"\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"not"},{"location":"modules_list/#or","text":"\u256d\u2500 Module: or \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.logic_gates.OrModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if one of the inputs is 'True'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.logic_gates.LogicProcessingModuleConf\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 delay number the delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 output is returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # type: ignore \u2502 \u2502 outputs.set_value(\"y\", inputs.get_value_data(\"a\") or\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"or"},{"location":"modules_list/#playground_example","text":"\u256d\u2500 Module: playground_example \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.playground.playground.ExampleModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc A very simple example module; concatenate two strings. \u2502 \u2502 \u2502 \u2502 The purpose of this modules is to show the main elements \u2502 \u2502 of a ``KiaraModule``: \u2502 \u2502 \u2502 \u2502 the (optional) configuration \u2502 \u2502 : must inherit from ``KiaraModuleConfig``, and the \u2502 \u2502 config class must be set as the \"_config_cls\" attribute \u2502 \u2502 on the ``KiaraModule`` class. Configuration values \u2502 \u2502 can be retrieved via the ``self.get_config_value(key)`` \u2502 \u2502 method \u2502 \u2502 \u2502 \u2502 the inputs description \u2502 \u2502 : must return a dictionary, containing the input \u2502 \u2502 name(s) as keys, and another dictionary containing type \u2502 \u2502 information \u2502 \u2502 and documentation about the input data as value \u2502 \u2502 \u2502 \u2502 the outputs description \u2502 \u2502 : must return a dictionary, containing the output \u2502 \u2502 name(s) as keys, and another dictionary containing type \u2502 \u2502 information \u2502 \u2502 and documentation about the output data as value \u2502 \u2502 \u2502 \u2502 the ``process`` method \u2502 \u2502 : this is where the actual work gets done. Input data \u2502 \u2502 can be accessed via ``inputs.get_value_data(key)``, \u2502 \u2502 results \u2502 \u2502 can be set with the ``outputs.set_value(key, \u2502 \u2502 value)`` method \u2502 \u2502 \u2502 \u2502 Examples: \u2502 \u2502 \u2502 \u2502 This example module can be tested on the commandline \u2502 \u2502 with the ``kiara run`` command: \u2502 \u2502 \u2502 \u2502 ``` \u2502 \u2502 kiara run playground_example text_1=\"xxx\" \u2502 \u2502 text_2=\"yyy\" \u2502 \u2502 ``` \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.playground.playground.ExampleModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 separator string The seperator between the two \u2502 \u2502 strings. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 separator = self.get_config_value(\"separator\") \u2502 \u2502 \u2502 \u2502 text_1 = inputs.get_value_data(\"text_1\") \u2502 \u2502 text_2 = inputs.get_value_data(\"text_2\") \u2502 \u2502 \u2502 \u2502 result = text_1 + separator + text_2 \u2502 \u2502 outputs.set_value(\"text\", result) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"playground_example"},{"location":"modules_list/#pretty_print","text":"\u256d\u2500 Module: pretty_print \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.strings.PrettyPrintModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 value_type = inputs.get_value_obj(\"item\").type_name \u2502 \u2502 input_value: Value = inputs.get_value_data(\"item\") \u2502 \u2502 \u2502 \u2502 max_lines = inputs.get_value_data(\"max_lines\") \u2502 \u2502 \u2502 \u2502 if value_type == \"table\": \u2502 \u2502 \u2502 \u2502 half_lines: typing.Optional[int] = None \u2502 \u2502 if max_lines: \u2502 \u2502 half_lines = int(max_lines / 2) \u2502 \u2502 \u2502 \u2502 input_value_str = pretty_print_arrow_table( \u2502 \u2502 input_value, num_head=half_lines, num_tail=h\u2026 \u2502 \u2502 ) \u2502 \u2502 else: \u2502 \u2502 input_value_str = pformat(input_value) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"pretty_string\", input_value_str) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"pretty_print"},{"location":"modules_list/#remove_stopwords","text":"\u256d\u2500 Module: remove_stopwords \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.language_processing.tokenize.RemoveStopwor\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 custom_stopwords = inputs.get_value_data(\"additional\u2026 \u2502 \u2502 languages = inputs.get_value_data(\"languages\") \u2502 \u2502 if isinstance(languages, str): \u2502 \u2502 languages = [languages] \u2502 \u2502 \u2502 \u2502 stopwords = set() \u2502 \u2502 if languages: \u2502 \u2502 for language in languages: \u2502 \u2502 if language not in get_stopwords().fileids(): \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Invalid language: {language}. Avai\u2026 \u2502 \u2502 ) \u2502 \u2502 stopwords.update(get_stopwords().words(langu\u2026 \u2502 \u2502 \u2502 \u2502 if custom_stopwords: \u2502 \u2502 stopwords.update(custom_stopwords) \u2502 \u2502 \u2502 \u2502 if not stopwords: \u2502 \u2502 outputs.set_value(\"token_list\", inputs.get_value\u2026 \u2502 \u2502 return \u2502 \u2502 \u2502 \u2502 token_lists = inputs.get_value_data(\"token_lists\") \u2502 \u2502 \u2502 \u2502 if hasattr(token_lists, \"to_pylist\"): \u2502 \u2502 token_lists = token_lists.to_pylist() \u2502 \u2502 \u2502 \u2502 result = [] \u2502 \u2502 for token_list in token_lists: \u2502 \u2502 \u2502 \u2502 cleaned_list = [x for x in token_list if x not i\u2026 \u2502 \u2502 result.append(cleaned_list) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"token_list\", pa.array(result)) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"remove_stopwords"},{"location":"modules_list/#replace_string","text":"\u256d\u2500 Module: replace_string \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.core.strings.ReplaceStringModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.core.strings.ReplaceModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 replacement_map object A map, containing the \u2502 \u2502 strings to be replaced as \u2502 \u2502 keys, and the replacements \u2502 \u2502 as values. \u2502 \u2502 default_value string The default value to use \u2502 \u2502 if the string to be \u2502 \u2502 replaced is not in the \u2502 \u2502 replacement map. By \u2502 \u2502 default, this just returns \u2502 \u2502 the string itself. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 text = inputs.get_value_data(\"text\") \u2502 \u2502 repl_map = self.get_config_value(\"replacement_map\") \u2502 \u2502 default = self.get_config_value(\"default_value\") \u2502 \u2502 \u2502 \u2502 if text not in repl_map.keys(): \u2502 \u2502 if default is None: \u2502 \u2502 result = text \u2502 \u2502 else: \u2502 \u2502 result = default \u2502 \u2502 else: \u2502 \u2502 result = repl_map[text] \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"text\", result) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"replace_string"},{"location":"modules_list/#tokenize_text","text":"\u256d\u2500 Module: tokenize_text \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.language_processing.tokenize.TokenizeTextM\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara_modules.language_processing.tokenize.TokenizeTextC\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 filter_non_alpha boolean Whether to filter out \u2502 \u2502 non alpha tokens. \u2502 \u2502 min_token_length integer The minimum token \u2502 \u2502 length. \u2502 \u2502 to_lowercase boolean Whether to lowercase the \u2502 \u2502 tokens. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: ValueSet, outputs: ValueSet) -\u2026 \u2502 \u2502 \u2502 \u2502 # TODO: module-independent caching? \u2502 \u2502 \u2502 \u2502 # language = inputs.get_value_data(\"language\") \u2502 \u2502 # \u2502 \u2502 text = inputs.get_value_data(\"text\") \u2502 \u2502 tokenized = nltk.word_tokenize(text) \u2502 \u2502 \u2502 \u2502 result = tokenized \u2502 \u2502 if self.get_config_value(\"min_token_length\") > 0: \u2502 \u2502 result = ( \u2502 \u2502 x \u2502 \u2502 for x in tokenized \u2502 \u2502 if len(x) >= self.get_config_value(\"min_toke\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"filter_non_alpha\"): \u2502 \u2502 result = (x for x in result if x.isalpha()) \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"to_lowercase\"): \u2502 \u2502 result = (x.lower() for x in result) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"token_list\", list(result)) \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"tokenize_text"},{"location":"pipelines_list/","text":"Available pipeline module types \u00b6 This page contains a list of all available Kiara pipeline module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type. import_network_graph \u00b6 \u256d\u2500 Module: import_network_graph \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.ImportNetworkGraph \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Create a network graph from 2 tabular data sets: one that \u2502 \u2502 contains the edges, one that contains node attributes \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules \u2502 \u2502 of this pipeline, and \u2502 \u2502 their connections. \u2502 \u2502 input_aliases -- n/a -- A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow input alias) as \u2502 \u2502 value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 output_aliases -- n/a -- A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_nam\u2026 \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow output alias) \u2502 \u2502 as value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this \u2502 \u2502 workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: import_local_file \u2502 \u2502 step_id: read_edges_file \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: import_local_file \u2502 \u2502 step_id: read_nodes_file \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: create_table_from_file \u2502 \u2502 step_id: load_edges_table \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 file: \u2502 \u2502 - step_id: read_edges_file \u2502 \u2502 value_name: file \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: create_table_from_file \u2502 \u2502 step_id: load_nodes_table \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 file: \u2502 \u2502 - step_id: read_nodes_file \u2502 \u2502 value_name: file \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: create_graph_from_edges_table \u2502 \u2502 step_id: create_graph \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 edges_table: \u2502 \u2502 - step_id: load_edges_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: augment_network_graph \u2502 \u2502 step_id: augment_graph \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 graph: \u2502 \u2502 - step_id: create_graph \u2502 \u2502 value_name: graph \u2502 \u2502 sub_value: \u2502 \u2502 node_attributes: \u2502 \u2502 - step_id: load_nodes_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 read_edges_file__path: edges_path \u2502 \u2502 read_nodes_file__path: nodes_path \u2502 \u2502 create_graph__source_column: source_column \u2502 \u2502 create_graph__target_column: target_column \u2502 \u2502 create_graph__weight_column: weight_column \u2502 \u2502 create_graph__graph_type: graph_type \u2502 \u2502 augment_graph__nodes_attributes: nodes_attributes \u2502 \u2502 augment_graph__index_column_name: nodes_table_index \u2502 \u2502 output_aliases: \u2502 \u2502 augment_graph__graph: graph \u2502 \u2502 doc: 'Create a network graph from 2 tabular data sets: o\u2026 \u2502 \u2502 one that contains node attributes' \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: import_network_graph \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f import_table_from_folder \u00b6 \u256d\u2500 Module: import_table_from_folder \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.ImportTableFromFolder \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Create a table from a folder that contains text files. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules \u2502 \u2502 of this pipeline, and \u2502 \u2502 their connections. \u2502 \u2502 input_aliases -- n/a -- A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow input alias) as \u2502 \u2502 value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 output_aliases -- n/a -- A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_nam\u2026 \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow output alias) \u2502 \u2502 as value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this \u2502 \u2502 workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: import_local_folder \u2502 \u2502 step_id: read_files_in_folder \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: create_table_from_text_files \u2502 \u2502 step_id: create_table \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 files: \u2502 \u2502 - step_id: read_files_in_folder \u2502 \u2502 value_name: file_bundle \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: auto \u2502 \u2502 output_aliases: auto \u2502 \u2502 doc: Create a table from a folder that contains text fil\u2026 \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: import_table_from_folder \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f nand \u00b6 \u256d\u2500 Module: nand \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.Nand \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Returns 'False' if both inputs are 'True'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules \u2502 \u2502 of this pipeline, and \u2502 \u2502 their connections. \u2502 \u2502 input_aliases -- n/a -- A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow input alias) as \u2502 \u2502 value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 output_aliases -- n/a -- A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_nam\u2026 \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow output alias) \u2502 \u2502 as value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this \u2502 \u2502 workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: and \u2502 \u2502 step_id: and \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: not \u2502 \u2502 step_id: not \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 a: \u2502 \u2502 - step_id: and \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 and__a: a \u2502 \u2502 and__b: b \u2502 \u2502 output_aliases: \u2502 \u2502 not__y: y \u2502 \u2502 doc: Returns 'False' if both inputs are 'True'. \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: nand \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f network_analysis \u00b6 \u256d\u2500 Module: network_analysis \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.NetworkAnalysis \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc First iteration of a network analysis pipeline. This \u2502 \u2502 doesn't do much yet. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules \u2502 \u2502 of this pipeline, and \u2502 \u2502 their connections. \u2502 \u2502 input_aliases -- n/a -- A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow input alias) as \u2502 \u2502 value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 output_aliases -- n/a -- A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_nam\u2026 \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow output alias) \u2502 \u2502 as value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this \u2502 \u2502 workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: find_shortest_path \u2502 \u2502 step_id: find_shortest_path \u2502 \u2502 module_config: \u2502 \u2502 mode: single-pair \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: graph_properties \u2502 \u2502 step_id: extract_properties \u2502 \u2502 module_config: \u2502 \u2502 density: false \u2502 \u2502 input_links: {} \u2502 \u2502 input_aliases: \u2502 \u2502 find_shortest_path__graph: graph \u2502 \u2502 extract_properties__graph: graph \u2502 \u2502 find_shortest_path__source_node: shortest_path_source_\u2026 \u2502 \u2502 find_shortest_path__target_node: shortest_path_target_\u2026 \u2502 \u2502 output_aliases: \u2502 \u2502 find_shortest_path__path: shortest_path \u2502 \u2502 extract_properties__largest_component: largest_compone\u2026 \u2502 \u2502 extract_properties__density_largest_component: density\u2026 \u2502 \u2502 extract_properties__number_of_nodes: number_of_nodes \u2502 \u2502 extract_properties__number_of_edges: number_of_edges \u2502 \u2502 doc: First iteration of a network analysis pipeline. Thi\u2026 \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: network_analysis \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f nor \u00b6 \u256d\u2500 Module: nor \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.Nor \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if both inputs are 'False'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules \u2502 \u2502 of this pipeline, and \u2502 \u2502 their connections. \u2502 \u2502 input_aliases -- n/a -- A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow input alias) as \u2502 \u2502 value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 output_aliases -- n/a -- A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_nam\u2026 \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow output alias) \u2502 \u2502 as value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this \u2502 \u2502 workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: or \u2502 \u2502 step_id: or \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: not \u2502 \u2502 step_id: not \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 a: \u2502 \u2502 - step_id: or \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 or__a: a \u2502 \u2502 or__b: b \u2502 \u2502 output_aliases: \u2502 \u2502 not__y: y \u2502 \u2502 doc: Returns 'True' if both inputs are 'False'. \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: nor \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f topic_modelling_end_to_end \u00b6 \u256d\u2500 Module: topic_modelling_end_to_end \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.TopicModellingEndToEnd \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Topic modelling dev pipeline. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules \u2502 \u2502 of this pipeline, and \u2502 \u2502 their connections. \u2502 \u2502 input_aliases -- n/a -- A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow input alias) as \u2502 \u2502 value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 output_aliases -- n/a -- A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_nam\u2026 \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow output alias) \u2502 \u2502 as value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this \u2502 \u2502 workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: import_local_folder \u2502 \u2502 step_id: read_files_in_folder \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: create_table_from_text_files \u2502 \u2502 step_id: create_table \u2502 \u2502 module_config: \u2502 \u2502 columns: \u2502 \u2502 - id \u2502 \u2502 - rel_path \u2502 \u2502 - file_name \u2502 \u2502 - content \u2502 \u2502 input_links: \u2502 \u2502 files: \u2502 \u2502 - step_id: read_files_in_folder \u2502 \u2502 value_name: file_bundle \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: map \u2502 \u2502 step_id: extract_date \u2502 \u2502 module_config: \u2502 \u2502 module_type: extract_date \u2502 \u2502 input_links: \u2502 \u2502 array: \u2502 \u2502 - step_id: create_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 config: file_name \u2502 \u2502 - module_type: map \u2502 \u2502 step_id: extract_ref \u2502 \u2502 module_config: \u2502 \u2502 module_type: match_regex \u2502 \u2502 module_config: \u2502 \u2502 regex: (\\w+\\d+)_\\d{4}-\\d{2}-\\d{2}_ \u2502 \u2502 only_first_match: true \u2502 \u2502 input_links: \u2502 \u2502 array: \u2502 \u2502 - step_id: create_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 config: file_name \u2502 \u2502 - module_type: map \u2502 \u2502 step_id: get_publication_name \u2502 \u2502 module_config: \u2502 \u2502 module_type: replace_string \u2502 \u2502 module_config: \u2502 \u2502 replacement_map: \u2502 \u2502 sn85066408: L\\'Italia \u2502 \u2502 '2012271201': Cronaca Sovversiva \u2502 \u2502 input_links: \u2502 \u2502 array: \u2502 \u2502 - step_id: extract_ref \u2502 \u2502 value_name: array \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: merge_table \u2502 \u2502 step_id: merged_table \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 sources: \u2502 \u2502 - step_id: create_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 - step_id: extract_date \u2502 \u2502 value_name: array \u2502 \u2502 sub_value: \u2502 \u2502 - step_id: extract_ref \u2502 \u2502 value_name: array \u2502 \u2502 sub_value: \u2502 \u2502 - step_id: get_publication_name \u2502 \u2502 value_name: array \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: map \u2502 \u2502 step_id: create_date_range_filter \u2502 \u2502 module_config: \u2502 \u2502 module_type: date_range_check \u2502 \u2502 input_name: date \u2502 \u2502 input_links: \u2502 \u2502 array: \u2502 \u2502 - step_id: extract_date \u2502 \u2502 value_name: array \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: filter_table \u2502 \u2502 step_id: filtered_table \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 table: \u2502 \u2502 - step_id: merged_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 mask: \u2502 \u2502 - step_id: create_date_range_filter \u2502 \u2502 value_name: array \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: map \u2502 \u2502 step_id: tokenize_text_corpus \u2502 \u2502 module_config: \u2502 \u2502 module_type: tokenize_text \u2502 \u2502 input_name: text \u2502 \u2502 input_links: \u2502 \u2502 array: \u2502 \u2502 - step_id: filtered_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 config: content \u2502 \u2502 - module_type: remove_stopwords \u2502 \u2502 step_id: remove_stopwords \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 token_lists: \u2502 \u2502 - step_id: tokenize_text_corpus \u2502 \u2502 value_name: array \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: lemmatize \u2502 \u2502 step_id: lemmatize \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 tokens_array: \u2502 \u2502 - step_id: remove_stopwords \u2502 \u2502 value_name: token_list \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: lda \u2502 \u2502 step_id: lda \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 tokens_array: \u2502 \u2502 - step_id: lemmatize \u2502 \u2502 value_name: tokens_array \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: auto \u2502 \u2502 output_aliases: auto \u2502 \u2502 doc: Topic modelling dev pipeline. \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: topic_modelling_end_to_end \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f xor \u00b6 \u256d\u2500 Module: xor \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.Xor \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if exactly one of it's two inputs is \u2502 \u2502 'True'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules \u2502 \u2502 of this pipeline, and \u2502 \u2502 their connections. \u2502 \u2502 input_aliases -- n/a -- A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow input alias) as \u2502 \u2502 value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 output_aliases -- n/a -- A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_nam\u2026 \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow output alias) \u2502 \u2502 as value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this \u2502 \u2502 workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: or \u2502 \u2502 step_id: or \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: nand \u2502 \u2502 step_id: nand \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: and \u2502 \u2502 step_id: and \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 a: \u2502 \u2502 - step_id: or \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 b: \u2502 \u2502 - step_id: nand \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 or__a: a \u2502 \u2502 or__b: b \u2502 \u2502 nand__a: a \u2502 \u2502 nand__b: b \u2502 \u2502 output_aliases: \u2502 \u2502 and__y: y \u2502 \u2502 doc: Returns 'True' if exactly one of it's two inputs is\u2026 \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: xor \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Included pipelines"},{"location":"pipelines_list/#available-pipeline-module-types","text":"This page contains a list of all available Kiara pipeline module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Available pipeline module types"},{"location":"pipelines_list/#import_network_graph","text":"\u256d\u2500 Module: import_network_graph \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.ImportNetworkGraph \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Create a network graph from 2 tabular data sets: one that \u2502 \u2502 contains the edges, one that contains node attributes \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules \u2502 \u2502 of this pipeline, and \u2502 \u2502 their connections. \u2502 \u2502 input_aliases -- n/a -- A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow input alias) as \u2502 \u2502 value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 output_aliases -- n/a -- A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_nam\u2026 \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow output alias) \u2502 \u2502 as value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this \u2502 \u2502 workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: import_local_file \u2502 \u2502 step_id: read_edges_file \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: import_local_file \u2502 \u2502 step_id: read_nodes_file \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: create_table_from_file \u2502 \u2502 step_id: load_edges_table \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 file: \u2502 \u2502 - step_id: read_edges_file \u2502 \u2502 value_name: file \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: create_table_from_file \u2502 \u2502 step_id: load_nodes_table \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 file: \u2502 \u2502 - step_id: read_nodes_file \u2502 \u2502 value_name: file \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: create_graph_from_edges_table \u2502 \u2502 step_id: create_graph \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 edges_table: \u2502 \u2502 - step_id: load_edges_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: augment_network_graph \u2502 \u2502 step_id: augment_graph \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 graph: \u2502 \u2502 - step_id: create_graph \u2502 \u2502 value_name: graph \u2502 \u2502 sub_value: \u2502 \u2502 node_attributes: \u2502 \u2502 - step_id: load_nodes_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 read_edges_file__path: edges_path \u2502 \u2502 read_nodes_file__path: nodes_path \u2502 \u2502 create_graph__source_column: source_column \u2502 \u2502 create_graph__target_column: target_column \u2502 \u2502 create_graph__weight_column: weight_column \u2502 \u2502 create_graph__graph_type: graph_type \u2502 \u2502 augment_graph__nodes_attributes: nodes_attributes \u2502 \u2502 augment_graph__index_column_name: nodes_table_index \u2502 \u2502 output_aliases: \u2502 \u2502 augment_graph__graph: graph \u2502 \u2502 doc: 'Create a network graph from 2 tabular data sets: o\u2026 \u2502 \u2502 one that contains node attributes' \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: import_network_graph \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"import_network_graph"},{"location":"pipelines_list/#import_table_from_folder","text":"\u256d\u2500 Module: import_table_from_folder \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.ImportTableFromFolder \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Create a table from a folder that contains text files. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules \u2502 \u2502 of this pipeline, and \u2502 \u2502 their connections. \u2502 \u2502 input_aliases -- n/a -- A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow input alias) as \u2502 \u2502 value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 output_aliases -- n/a -- A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_nam\u2026 \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow output alias) \u2502 \u2502 as value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this \u2502 \u2502 workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: import_local_folder \u2502 \u2502 step_id: read_files_in_folder \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: create_table_from_text_files \u2502 \u2502 step_id: create_table \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 files: \u2502 \u2502 - step_id: read_files_in_folder \u2502 \u2502 value_name: file_bundle \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: auto \u2502 \u2502 output_aliases: auto \u2502 \u2502 doc: Create a table from a folder that contains text fil\u2026 \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: import_table_from_folder \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"import_table_from_folder"},{"location":"pipelines_list/#nand","text":"\u256d\u2500 Module: nand \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.Nand \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Returns 'False' if both inputs are 'True'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules \u2502 \u2502 of this pipeline, and \u2502 \u2502 their connections. \u2502 \u2502 input_aliases -- n/a -- A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow input alias) as \u2502 \u2502 value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 output_aliases -- n/a -- A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_nam\u2026 \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow output alias) \u2502 \u2502 as value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this \u2502 \u2502 workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: and \u2502 \u2502 step_id: and \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: not \u2502 \u2502 step_id: not \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 a: \u2502 \u2502 - step_id: and \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 and__a: a \u2502 \u2502 and__b: b \u2502 \u2502 output_aliases: \u2502 \u2502 not__y: y \u2502 \u2502 doc: Returns 'False' if both inputs are 'True'. \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: nand \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"nand"},{"location":"pipelines_list/#network_analysis","text":"\u256d\u2500 Module: network_analysis \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.NetworkAnalysis \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc First iteration of a network analysis pipeline. This \u2502 \u2502 doesn't do much yet. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules \u2502 \u2502 of this pipeline, and \u2502 \u2502 their connections. \u2502 \u2502 input_aliases -- n/a -- A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow input alias) as \u2502 \u2502 value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 output_aliases -- n/a -- A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_nam\u2026 \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow output alias) \u2502 \u2502 as value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this \u2502 \u2502 workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: find_shortest_path \u2502 \u2502 step_id: find_shortest_path \u2502 \u2502 module_config: \u2502 \u2502 mode: single-pair \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: graph_properties \u2502 \u2502 step_id: extract_properties \u2502 \u2502 module_config: \u2502 \u2502 density: false \u2502 \u2502 input_links: {} \u2502 \u2502 input_aliases: \u2502 \u2502 find_shortest_path__graph: graph \u2502 \u2502 extract_properties__graph: graph \u2502 \u2502 find_shortest_path__source_node: shortest_path_source_\u2026 \u2502 \u2502 find_shortest_path__target_node: shortest_path_target_\u2026 \u2502 \u2502 output_aliases: \u2502 \u2502 find_shortest_path__path: shortest_path \u2502 \u2502 extract_properties__largest_component: largest_compone\u2026 \u2502 \u2502 extract_properties__density_largest_component: density\u2026 \u2502 \u2502 extract_properties__number_of_nodes: number_of_nodes \u2502 \u2502 extract_properties__number_of_edges: number_of_edges \u2502 \u2502 doc: First iteration of a network analysis pipeline. Thi\u2026 \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: network_analysis \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"network_analysis"},{"location":"pipelines_list/#nor","text":"\u256d\u2500 Module: nor \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.Nor \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if both inputs are 'False'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules \u2502 \u2502 of this pipeline, and \u2502 \u2502 their connections. \u2502 \u2502 input_aliases -- n/a -- A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow input alias) as \u2502 \u2502 value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 output_aliases -- n/a -- A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_nam\u2026 \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow output alias) \u2502 \u2502 as value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this \u2502 \u2502 workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: or \u2502 \u2502 step_id: or \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: not \u2502 \u2502 step_id: not \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 a: \u2502 \u2502 - step_id: or \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 or__a: a \u2502 \u2502 or__b: b \u2502 \u2502 output_aliases: \u2502 \u2502 not__y: y \u2502 \u2502 doc: Returns 'True' if both inputs are 'False'. \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: nor \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"nor"},{"location":"pipelines_list/#topic_modelling_end_to_end","text":"\u256d\u2500 Module: topic_modelling_end_to_end \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.TopicModellingEndToEnd \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Topic modelling dev pipeline. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules \u2502 \u2502 of this pipeline, and \u2502 \u2502 their connections. \u2502 \u2502 input_aliases -- n/a -- A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow input alias) as \u2502 \u2502 value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 output_aliases -- n/a -- A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_nam\u2026 \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow output alias) \u2502 \u2502 as value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this \u2502 \u2502 workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: import_local_folder \u2502 \u2502 step_id: read_files_in_folder \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: create_table_from_text_files \u2502 \u2502 step_id: create_table \u2502 \u2502 module_config: \u2502 \u2502 columns: \u2502 \u2502 - id \u2502 \u2502 - rel_path \u2502 \u2502 - file_name \u2502 \u2502 - content \u2502 \u2502 input_links: \u2502 \u2502 files: \u2502 \u2502 - step_id: read_files_in_folder \u2502 \u2502 value_name: file_bundle \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: map \u2502 \u2502 step_id: extract_date \u2502 \u2502 module_config: \u2502 \u2502 module_type: extract_date \u2502 \u2502 input_links: \u2502 \u2502 array: \u2502 \u2502 - step_id: create_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 config: file_name \u2502 \u2502 - module_type: map \u2502 \u2502 step_id: extract_ref \u2502 \u2502 module_config: \u2502 \u2502 module_type: match_regex \u2502 \u2502 module_config: \u2502 \u2502 regex: (\\w+\\d+)_\\d{4}-\\d{2}-\\d{2}_ \u2502 \u2502 only_first_match: true \u2502 \u2502 input_links: \u2502 \u2502 array: \u2502 \u2502 - step_id: create_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 config: file_name \u2502 \u2502 - module_type: map \u2502 \u2502 step_id: get_publication_name \u2502 \u2502 module_config: \u2502 \u2502 module_type: replace_string \u2502 \u2502 module_config: \u2502 \u2502 replacement_map: \u2502 \u2502 sn85066408: L\\'Italia \u2502 \u2502 '2012271201': Cronaca Sovversiva \u2502 \u2502 input_links: \u2502 \u2502 array: \u2502 \u2502 - step_id: extract_ref \u2502 \u2502 value_name: array \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: merge_table \u2502 \u2502 step_id: merged_table \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 sources: \u2502 \u2502 - step_id: create_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 - step_id: extract_date \u2502 \u2502 value_name: array \u2502 \u2502 sub_value: \u2502 \u2502 - step_id: extract_ref \u2502 \u2502 value_name: array \u2502 \u2502 sub_value: \u2502 \u2502 - step_id: get_publication_name \u2502 \u2502 value_name: array \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: map \u2502 \u2502 step_id: create_date_range_filter \u2502 \u2502 module_config: \u2502 \u2502 module_type: date_range_check \u2502 \u2502 input_name: date \u2502 \u2502 input_links: \u2502 \u2502 array: \u2502 \u2502 - step_id: extract_date \u2502 \u2502 value_name: array \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: filter_table \u2502 \u2502 step_id: filtered_table \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 table: \u2502 \u2502 - step_id: merged_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 mask: \u2502 \u2502 - step_id: create_date_range_filter \u2502 \u2502 value_name: array \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: map \u2502 \u2502 step_id: tokenize_text_corpus \u2502 \u2502 module_config: \u2502 \u2502 module_type: tokenize_text \u2502 \u2502 input_name: text \u2502 \u2502 input_links: \u2502 \u2502 array: \u2502 \u2502 - step_id: filtered_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 config: content \u2502 \u2502 - module_type: remove_stopwords \u2502 \u2502 step_id: remove_stopwords \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 token_lists: \u2502 \u2502 - step_id: tokenize_text_corpus \u2502 \u2502 value_name: array \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: lemmatize \u2502 \u2502 step_id: lemmatize \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 tokens_array: \u2502 \u2502 - step_id: remove_stopwords \u2502 \u2502 value_name: token_list \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: lda \u2502 \u2502 step_id: lda \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 tokens_array: \u2502 \u2502 - step_id: lemmatize \u2502 \u2502 value_name: tokens_array \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: auto \u2502 \u2502 output_aliases: auto \u2502 \u2502 doc: Topic modelling dev pipeline. \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: topic_modelling_end_to_end \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"topic_modelling_end_to_end"},{"location":"pipelines_list/#xor","text":"\u256d\u2500 Module: xor \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.Xor \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if exactly one of it's two inputs is \u2502 \u2502 'True'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.module_config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules \u2502 \u2502 of this pipeline, and \u2502 \u2502 their connections. \u2502 \u2502 input_aliases -- n/a -- A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow input alias) as \u2502 \u2502 value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 output_aliases -- n/a -- A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_nam\u2026 \u2502 \u2502 -- double underscore!) \u2502 \u2502 name as key, and a \u2502 \u2502 string (the resulting \u2502 \u2502 workflow output alias) \u2502 \u2502 as value. Check the \u2502 \u2502 documentation for the \u2502 \u2502 config class for which \u2502 \u2502 marker strings can be \u2502 \u2502 used to automatically \u2502 \u2502 create this map if \u2502 \u2502 possible. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this \u2502 \u2502 workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: or \u2502 \u2502 step_id: or \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: nand \u2502 \u2502 step_id: nand \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: and \u2502 \u2502 step_id: and \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 a: \u2502 \u2502 - step_id: or \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 b: \u2502 \u2502 - step_id: nand \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 or__a: a \u2502 \u2502 or__b: b \u2502 \u2502 nand__a: a \u2502 \u2502 nand__b: b \u2502 \u2502 output_aliases: \u2502 \u2502 and__y: y \u2502 \u2502 doc: Returns 'True' if exactly one of it's two inputs is\u2026 \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: xor \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"xor"},{"location":"usage/","text":"Usage \u00b6 TO BE DONE","title":"Usage"},{"location":"usage/#usage","text":"TO BE DONE","title":"Usage"},{"location":"api_reference/kiara_modules.playground/","text":"kiara_modules.playground \u00b6 Top-level package for kiara_modules.playground.","title":"kiara_modules.playground"},{"location":"api_reference/kiara_modules.playground/#kiara_modulesplayground","text":"Top-level package for kiara_modules.playground.","title":"kiara_modules.playground"},{"location":"api_reference/kiara_modules.playground.playground/","text":"kiara_modules.playground.playground \u00b6 ExampleModule \u00b6 A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a KiaraModule : the (optional) configuration : must inherit from KiaraModuleConfig , and the config class must be set as the \"_config_cls\" attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with the kiara run command: kiara run playground_example text_1=\"xxx\" text_2=\"yyy\" create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in playground/playground.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in playground/playground.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs ValueSet the input value set required outputs ValueSet the output value set required Source code in playground/playground.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result ) ExampleModuleConfig pydantic-model \u00b6 separator : str pydantic-field \u00b6 The seperator between the two strings.","title":"\u279c\u2007playground"},{"location":"api_reference/kiara_modules.playground.playground/#kiara_modulesplaygroundplayground","text":"","title":"kiara_modules.playground.playground"},{"location":"api_reference/kiara_modules.playground.playground/#kiara_modules.playground.playground.ExampleModule","text":"A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a KiaraModule : the (optional) configuration : must inherit from KiaraModuleConfig , and the config class must be set as the \"_config_cls\" attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with the kiara run command: kiara run playground_example text_1=\"xxx\" text_2=\"yyy\"","title":"ExampleModule"},{"location":"api_reference/kiara_modules.playground.playground/#kiara_modules.playground.playground.ExampleModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in playground/playground.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.playground.playground/#kiara_modules.playground.playground.ExampleModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in playground/playground.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.playground.playground/#kiara_modules.playground.playground.ExampleModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs ValueSet the input value set required outputs ValueSet the output value set required Source code in playground/playground.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result )","title":"process()"},{"location":"api_reference/kiara_modules.playground.playground/#kiara_modules.playground.playground.ExampleModuleConfig","text":"","title":"ExampleModuleConfig"},{"location":"api_reference/kiara_modules.playground.playground/#kiara_modules.playground.playground.ExampleModuleConfig.separator","text":"The seperator between the two strings.","title":"separator"}]}