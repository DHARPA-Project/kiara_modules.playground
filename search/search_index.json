{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kiara modules for: playground \u00b6 This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara . Description \u00b6 TODO Package content \u00b6 Core modules \u00b6 playground.lena.graph_components : -- n/a -- playground.markus.from_file : Load table-like data from a kiara file object (not a path!). playground.sandbox.example : A very simple example module; concatenate two strings. Pipelines \u00b6 Value types \u00b6 Metadata schemas \u00b6 Links \u00b6 Documentation: https://dharpa.org/kiara_modules.playground Code: https://github.com/DHARPA-Project/kiara_modules.playground","title":"Home"},{"location":"#kiara-modules-for-playground","text":"This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara .","title":"kiara modules for: playground"},{"location":"#description","text":"TODO","title":"Description"},{"location":"#package-content","text":"","title":"Package content"},{"location":"#core-modules","text":"playground.lena.graph_components : -- n/a -- playground.markus.from_file : Load table-like data from a kiara file object (not a path!). playground.sandbox.example : A very simple example module; concatenate two strings.","title":"Core modules"},{"location":"#pipelines","text":"","title":"Pipelines"},{"location":"#value-types","text":"","title":"Value types"},{"location":"#metadata-schemas","text":"","title":"Metadata schemas"},{"location":"#links","text":"Documentation: https://dharpa.org/kiara_modules.playground Code: https://github.com/DHARPA-Project/kiara_modules.playground","title":"Links"},{"location":"examples/","text":"Examples \u00b6 Command-line \u00b6 Import ('onboard') a csv file \u00b6 The import.local_file module can be used to import any file. Internally, it will extract some metadata (file size, hash, original name, ...) and copy the file into the internal kiara data store, where it should be safe from external (or any, really) modification. kiara run import.local_file path=examples/data/misc/photo_with_gps_metadata_1.jpg aliases=photo1 Check whether the file is imported using one of those commands: kiara data list kiara data explain photo1 Import ('onboard') a csv file as a table \u00b6 kiara run table.import.from_local_file path=examples/data/journals/JournalNodes1902.csv aliases=journal_1902_nodes You should see two now data items when doing kiara data list : one for the file (this one won't have an alias because we didn't give it any), and one for the table itself. Run a sql query against the newly imported table: \u00b6 kiara run table.query.sql table=value:journal_1902_nodes query=\"select * from data where City='Berlin'\" We could also save the query result into the kiara data store: kiara run table.query.sql table=value:journal_1902_nodes query=\"select * from data where City='Berlin'\" --save --alias query_result=berlin_journals Now check the metadata of the saved result via the explain command: kiara data explain berlin_journals Python \u00b6 To be done","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#command-line","text":"","title":"Command-line"},{"location":"examples/#import-onboard-a-csv-file","text":"The import.local_file module can be used to import any file. Internally, it will extract some metadata (file size, hash, original name, ...) and copy the file into the internal kiara data store, where it should be safe from external (or any, really) modification. kiara run import.local_file path=examples/data/misc/photo_with_gps_metadata_1.jpg aliases=photo1 Check whether the file is imported using one of those commands: kiara data list kiara data explain photo1","title":"Import ('onboard') a csv file"},{"location":"examples/#import-onboard-a-csv-file-as-a-table","text":"kiara run table.import.from_local_file path=examples/data/journals/JournalNodes1902.csv aliases=journal_1902_nodes You should see two now data items when doing kiara data list : one for the file (this one won't have an alias because we didn't give it any), and one for the table itself.","title":"Import ('onboard') a csv file as a table"},{"location":"examples/#run-a-sql-query-against-the-newly-imported-table","text":"kiara run table.query.sql table=value:journal_1902_nodes query=\"select * from data where City='Berlin'\" We could also save the query result into the kiara data store: kiara run table.query.sql table=value:journal_1902_nodes query=\"select * from data where City='Berlin'\" --save --alias query_result=berlin_journals Now check the metadata of the saved result via the explain command: kiara data explain berlin_journals","title":"Run a sql query against the newly imported table:"},{"location":"examples/#python","text":"To be done","title":"Python"},{"location":"modules_list/","text":"Available module types \u00b6 This page contains a list of all available Kiara module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type. playground.lena.graph_components \u00b6 \u256d\u2500 Module: graph_components \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 Lena Jaskov (helena.jaskov@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags playground \u2502 \u2502 Labels package: kiara_modules.playground \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name GrpahComponentsModule \u2502 \u2502 module_name kiara_modules.playground.lena \u2502 \u2502 full_name kiara_modules.playground.lena.Gr\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"find_largest_com\u2026 \u2502 \u2502 input_graph: Graph = inputs.get_value_\u2026 \u2502 \u2502 undir_graph = nx.to_undirected(input_g\u2026 \u2502 \u2502 undir_components = nx.connected_compon\u2026 \u2502 \u2502 lg_component = max(undir_components, k\u2026 \u2502 \u2502 subgraph = input_graph.subgraph(lg_com\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_values(largest_component=s\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"number_of_compon\u2026 \u2502 \u2502 input_graph = inputs.get_value_data(\"g\u2026 \u2502 \u2502 undir_graph = nx.to_undirected(input_g\u2026 \u2502 \u2502 number_of_components = nx.number_conne\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_values(number_of_component\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f playground.markus.from_file \u00b6 \u256d\u2500 Module: from_file \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Load table-like data from a kiara file object \u2502 \u2502 (not a path!). \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags playground \u2502 \u2502 Labels package: kiara_modules.playground \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name CreateGraphFromFileModule \u2502 \u2502 module_name kiara_modules.playground.markus \u2502 \u2502 full_name kiara_modules.playground.markus.\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 input_file: FileMetadata = inputs.get_valu\u2026 \u2502 \u2502 imported_data = csv.read_csv(input_file.pa\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"allow_column_fil\u2026 \u2502 \u2502 if self.get_config_value(\"columns\"): \u2502 \u2502 imported_data = imported_data.sele\u2026 \u2502 \u2502 self.get_config_value(\"only_co\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", imported_data) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f playground.sandbox.example \u00b6 \u256d\u2500 Module: example \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 A very simple example module; concatenate two \u2502 \u2502 strings. \u2502 \u2502 \u2502 \u2502 The purpose of this module is to show the main \u2502 \u2502 elements of a KiaraModule: \u2502 \u2502 \u2502 \u2502 the (optional) configuration : must inherit \u2502 \u2502 from KiaraModuleConfig, and the config class \u2502 \u2502 must be set as the \"_config_cls\" attribute on \u2502 \u2502 the KiaraModule class. Configuration values can \u2502 \u2502 be retrieved via the self.get_config_value(key) \u2502 \u2502 method \u2502 \u2502 \u2502 \u2502 the inputs description : must return a \u2502 \u2502 dictionary, containing the input name(s) as \u2502 \u2502 keys, and another dictionary containing type \u2502 \u2502 information and documentation about the input \u2502 \u2502 data as value \u2502 \u2502 \u2502 \u2502 the outputs description : must return a \u2502 \u2502 dictionary, containing the output name(s) as \u2502 \u2502 keys, and another dictionary containing type \u2502 \u2502 information and documentation about the output \u2502 \u2502 data as value \u2502 \u2502 \u2502 \u2502 the process method : this is where the \u2502 \u2502 actual work gets done. Input data can be \u2502 \u2502 accessed via inputs.get_value_data(key), \u2502 \u2502 results can be set with the \u2502 \u2502 outputs.set_value(key, value) method \u2502 \u2502 \u2502 \u2502 Examples: \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 This example module can be tested on the c\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 kiara module explain-type playground.s\u2026 \u2502 \u2502 \u2502 \u2502 kiara module explain-instance playgrou\u2026 \u2502 \u2502 \u2502 \u2502 kiara run playground.sandbox.example t\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 To set a different separator in the config\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 kiara run playground.sandbox.example -\u2026 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags playground \u2502 \u2502 Labels package: kiara_modules.playground \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ExampleModule \u2502 \u2502 module_name kiara_modules.playground.sandbox \u2502 \u2502 full_name kiara_modules.playground.sandbox\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 separator = self.get_config_value(\"separat\u2026 \u2502 \u2502 \u2502 \u2502 text_1 = inputs.get_value_data(\"text_1\") \u2502 \u2502 text_2 = inputs.get_value_data(\"text_2\") \u2502 \u2502 \u2502 \u2502 result = text_1 + separator + text_2 \u2502 \u2502 outputs.set_value(\"text\", result) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Included modules"},{"location":"modules_list/#available-module-types","text":"This page contains a list of all available Kiara module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Available module types"},{"location":"modules_list/#playgroundlenagraph_components","text":"\u256d\u2500 Module: graph_components \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 Lena Jaskov (helena.jaskov@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags playground \u2502 \u2502 Labels package: kiara_modules.playground \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name GrpahComponentsModule \u2502 \u2502 module_name kiara_modules.playground.lena \u2502 \u2502 full_name kiara_modules.playground.lena.Gr\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"find_largest_com\u2026 \u2502 \u2502 input_graph: Graph = inputs.get_value_\u2026 \u2502 \u2502 undir_graph = nx.to_undirected(input_g\u2026 \u2502 \u2502 undir_components = nx.connected_compon\u2026 \u2502 \u2502 lg_component = max(undir_components, k\u2026 \u2502 \u2502 subgraph = input_graph.subgraph(lg_com\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_values(largest_component=s\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"number_of_compon\u2026 \u2502 \u2502 input_graph = inputs.get_value_data(\"g\u2026 \u2502 \u2502 undir_graph = nx.to_undirected(input_g\u2026 \u2502 \u2502 number_of_components = nx.number_conne\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_values(number_of_component\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"playground.lena.graph_components"},{"location":"modules_list/#playgroundmarkusfrom_file","text":"\u256d\u2500 Module: from_file \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Load table-like data from a kiara file object \u2502 \u2502 (not a path!). \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags playground \u2502 \u2502 Labels package: kiara_modules.playground \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name CreateGraphFromFileModule \u2502 \u2502 module_name kiara_modules.playground.markus \u2502 \u2502 full_name kiara_modules.playground.markus.\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 input_file: FileMetadata = inputs.get_valu\u2026 \u2502 \u2502 imported_data = csv.read_csv(input_file.pa\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"allow_column_fil\u2026 \u2502 \u2502 if self.get_config_value(\"columns\"): \u2502 \u2502 imported_data = imported_data.sele\u2026 \u2502 \u2502 self.get_config_value(\"only_co\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", imported_data) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"playground.markus.from_file"},{"location":"modules_list/#playgroundsandboxexample","text":"\u256d\u2500 Module: example \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 A very simple example module; concatenate two \u2502 \u2502 strings. \u2502 \u2502 \u2502 \u2502 The purpose of this module is to show the main \u2502 \u2502 elements of a KiaraModule: \u2502 \u2502 \u2502 \u2502 the (optional) configuration : must inherit \u2502 \u2502 from KiaraModuleConfig, and the config class \u2502 \u2502 must be set as the \"_config_cls\" attribute on \u2502 \u2502 the KiaraModule class. Configuration values can \u2502 \u2502 be retrieved via the self.get_config_value(key) \u2502 \u2502 method \u2502 \u2502 \u2502 \u2502 the inputs description : must return a \u2502 \u2502 dictionary, containing the input name(s) as \u2502 \u2502 keys, and another dictionary containing type \u2502 \u2502 information and documentation about the input \u2502 \u2502 data as value \u2502 \u2502 \u2502 \u2502 the outputs description : must return a \u2502 \u2502 dictionary, containing the output name(s) as \u2502 \u2502 keys, and another dictionary containing type \u2502 \u2502 information and documentation about the output \u2502 \u2502 data as value \u2502 \u2502 \u2502 \u2502 the process method : this is where the \u2502 \u2502 actual work gets done. Input data can be \u2502 \u2502 accessed via inputs.get_value_data(key), \u2502 \u2502 results can be set with the \u2502 \u2502 outputs.set_value(key, value) method \u2502 \u2502 \u2502 \u2502 Examples: \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 This example module can be tested on the c\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 kiara module explain-type playground.s\u2026 \u2502 \u2502 \u2502 \u2502 kiara module explain-instance playgrou\u2026 \u2502 \u2502 \u2502 \u2502 kiara run playground.sandbox.example t\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 To set a different separator in the config\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 kiara run playground.sandbox.example -\u2026 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags playground \u2502 \u2502 Labels package: kiara_modules.playground \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ExampleModule \u2502 \u2502 module_name kiara_modules.playground.sandbox \u2502 \u2502 full_name kiara_modules.playground.sandbox\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 separator = self.get_config_value(\"separat\u2026 \u2502 \u2502 \u2502 \u2502 text_1 = inputs.get_value_data(\"text_1\") \u2502 \u2502 text_2 = inputs.get_value_data(\"text_2\") \u2502 \u2502 \u2502 \u2502 result = text_1 + separator + text_2 \u2502 \u2502 outputs.set_value(\"text\", result) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"playground.sandbox.example"},{"location":"pipelines_list/","text":"Available pipeline module types \u00b6 This page contains a list of all available Kiara pipeline module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Included pipelines"},{"location":"pipelines_list/#available-pipeline-module-types","text":"This page contains a list of all available Kiara pipeline module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Available pipeline module types"},{"location":"usage/","text":"Usage \u00b6 TO BE DONE","title":"Usage"},{"location":"usage/#usage","text":"TO BE DONE","title":"Usage"},{"location":"api_reference/kiara_modules.playground.lena/","text":"kiara_modules.playground.lena \u00b6 FindLargestComponentsModuleConfig pydantic-model \u00b6 find_largest_component : bool pydantic-field \u00b6 Find the largest component of a graph. number_of_components : bool pydantic-field \u00b6 Count the number of components. GrpahComponentsModule \u00b6 create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in playground/lena.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network.graph\" , \"doc\" : \"The network graph.\" }} create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in playground/lena.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: result = {} if self . get_config_value ( \"find_largest_component\" ): result [ \"largest_component\" ] = { \"type\" : \"network.graph\" , \"doc\" : \"A sub-graph of the largest component of the graph.\" , } if self . get_config_value ( \"number_of_components\" ): result [ \"number_of_components\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of components in the graph.\" , } return result process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs ValueSet the input value set required outputs ValueSet the output value set required Source code in playground/lena.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : if self . get_config_value ( \"find_largest_component\" ): input_graph : Graph = inputs . get_value_data ( \"graph\" ) undir_graph = nx . to_undirected ( input_graph ) undir_components = nx . connected_components ( undir_graph ) lg_component = max ( undir_components , key = len ) subgraph = input_graph . subgraph ( lg_component ) outputs . set_values ( largest_component = subgraph ) if self . get_config_value ( \"number_of_components\" ): input_graph = inputs . get_value_data ( \"graph\" ) undir_graph = nx . to_undirected ( input_graph ) number_of_components = nx . number_connected_components ( undir_graph ) outputs . set_values ( number_of_components = number_of_components )","title":"\u279c\u2007lena"},{"location":"api_reference/kiara_modules.playground.lena/#kiara_modulesplaygroundlena","text":"","title":"kiara_modules.playground.lena"},{"location":"api_reference/kiara_modules.playground.lena/#kiara_modules.playground.lena.FindLargestComponentsModuleConfig","text":"","title":"FindLargestComponentsModuleConfig"},{"location":"api_reference/kiara_modules.playground.lena/#kiara_modules.playground.lena.FindLargestComponentsModuleConfig.find_largest_component","text":"Find the largest component of a graph.","title":"find_largest_component"},{"location":"api_reference/kiara_modules.playground.lena/#kiara_modules.playground.lena.FindLargestComponentsModuleConfig.number_of_components","text":"Count the number of components.","title":"number_of_components"},{"location":"api_reference/kiara_modules.playground.lena/#kiara_modules.playground.lena.GrpahComponentsModule","text":"","title":"GrpahComponentsModule"},{"location":"api_reference/kiara_modules.playground.lena/#kiara_modules.playground.lena.GrpahComponentsModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in playground/lena.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network.graph\" , \"doc\" : \"The network graph.\" }}","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.playground.lena/#kiara_modules.playground.lena.GrpahComponentsModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in playground/lena.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: result = {} if self . get_config_value ( \"find_largest_component\" ): result [ \"largest_component\" ] = { \"type\" : \"network.graph\" , \"doc\" : \"A sub-graph of the largest component of the graph.\" , } if self . get_config_value ( \"number_of_components\" ): result [ \"number_of_components\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of components in the graph.\" , } return result","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.playground.lena/#kiara_modules.playground.lena.GrpahComponentsModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs ValueSet the input value set required outputs ValueSet the output value set required Source code in playground/lena.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : if self . get_config_value ( \"find_largest_component\" ): input_graph : Graph = inputs . get_value_data ( \"graph\" ) undir_graph = nx . to_undirected ( input_graph ) undir_components = nx . connected_components ( undir_graph ) lg_component = max ( undir_components , key = len ) subgraph = input_graph . subgraph ( lg_component ) outputs . set_values ( largest_component = subgraph ) if self . get_config_value ( \"number_of_components\" ): input_graph = inputs . get_value_data ( \"graph\" ) undir_graph = nx . to_undirected ( input_graph ) number_of_components = nx . number_connected_components ( undir_graph ) outputs . set_values ( number_of_components = number_of_components )","title":"process()"},{"location":"api_reference/kiara_modules.playground.markus/","text":"kiara_modules.playground.markus \u00b6 CreateGraphFromFileModule \u00b6 Load table-like data from a kiara file object (not a path!). create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in playground/markus/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"file\" : { \"type\" : \"file\" , \"doc\" : \"The file that contains table data.\" , \"optional\" : False , } } if self . get_config_value ( \"allow_column_filter\" ): inputs [ \"columns\" ] = { \"type\" : \"array\" , \"doc\" : \"If provided, only import the columns that match items in this list.\" , \"optional\" : False , } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in playground/markus/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"table\" : { \"type\" : \"table\" , \"doc\" : \"the imported table\" }} process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs ValueSet the input value set required outputs ValueSet the output value set required Source code in playground/markus/__init__.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : input_file : FileMetadata = inputs . get_value_data ( \"file\" ) imported_data = csv . read_csv ( input_file . path ) if self . get_config_value ( \"allow_column_filter\" ): if self . get_config_value ( \"columns\" ): imported_data = imported_data . select ( self . get_config_value ( \"only_columns\" ) ) outputs . set_value ( \"table\" , imported_data )","title":"\u279c\u2007markus"},{"location":"api_reference/kiara_modules.playground.markus/#kiara_modulesplaygroundmarkus","text":"","title":"kiara_modules.playground.markus"},{"location":"api_reference/kiara_modules.playground.markus/#kiara_modules.playground.markus.__init__.CreateGraphFromFileModule","text":"Load table-like data from a kiara file object (not a path!).","title":"CreateGraphFromFileModule"},{"location":"api_reference/kiara_modules.playground.markus/#kiara_modules.playground.markus.__init__.CreateGraphFromFileModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in playground/markus/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"file\" : { \"type\" : \"file\" , \"doc\" : \"The file that contains table data.\" , \"optional\" : False , } } if self . get_config_value ( \"allow_column_filter\" ): inputs [ \"columns\" ] = { \"type\" : \"array\" , \"doc\" : \"If provided, only import the columns that match items in this list.\" , \"optional\" : False , } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.playground.markus/#kiara_modules.playground.markus.__init__.CreateGraphFromFileModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in playground/markus/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"table\" : { \"type\" : \"table\" , \"doc\" : \"the imported table\" }}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.playground.markus/#kiara_modules.playground.markus.__init__.CreateGraphFromFileModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs ValueSet the input value set required outputs ValueSet the output value set required Source code in playground/markus/__init__.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : input_file : FileMetadata = inputs . get_value_data ( \"file\" ) imported_data = csv . read_csv ( input_file . path ) if self . get_config_value ( \"allow_column_filter\" ): if self . get_config_value ( \"columns\" ): imported_data = imported_data . select ( self . get_config_value ( \"only_columns\" ) ) outputs . set_value ( \"table\" , imported_data )","title":"process()"},{"location":"api_reference/kiara_modules.playground/","text":"kiara_modules.playground \u00b6 Top-level package for kiara_modules.playground.","title":"kiara_modules.playground"},{"location":"api_reference/kiara_modules.playground/#kiara_modulesplayground","text":"Top-level package for kiara_modules.playground.","title":"kiara_modules.playground"},{"location":"api_reference/kiara_modules.playground.metadata_schemas/","text":"kiara_modules.playground.metadata_schemas \u00b6 This module contains the metadata models that are used in the kiara_modules.playground package. Metadata models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata that is attached to data, as well as kiara modules. It is possible to register metadata using a JSON schema string, but it is recommended to create a metadata model, because it is much easier overall. Metadata models must be a sub-class of kiara.metadata.MetadataModel .","title":"\u279c\u2007metadata_schemas"},{"location":"api_reference/kiara_modules.playground.metadata_schemas/#kiara_modulesplaygroundmetadata_schemas","text":"This module contains the metadata models that are used in the kiara_modules.playground package. Metadata models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata that is attached to data, as well as kiara modules. It is possible to register metadata using a JSON schema string, but it is recommended to create a metadata model, because it is much easier overall. Metadata models must be a sub-class of kiara.metadata.MetadataModel .","title":"kiara_modules.playground.metadata_schemas"},{"location":"api_reference/kiara_modules.playground.pipelines/","text":"kiara_modules.playground.pipelines \u00b6 Virtual module that is used as base for PipelineModule classes that are auto-generated from pipeline descriptions under this folder.","title":"\u279c\u2007pipelines"},{"location":"api_reference/kiara_modules.playground.pipelines/#kiara_modulesplaygroundpipelines","text":"Virtual module that is used as base for PipelineModule classes that are auto-generated from pipeline descriptions under this folder.","title":"kiara_modules.playground.pipelines"},{"location":"api_reference/kiara_modules.playground.sandbox/","text":"kiara_modules.playground.sandbox \u00b6 ExampleModule \u00b6 A very simple example module; concatenate two strings. The purpose of this module is to show the main elements of a KiaraModule : the (optional) configuration : must inherit from KiaraModuleConfig , and the config class must be set as the \"_config_cls\" attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with one of the relevant kiara commands: kiara module explain-type playground.sandbox.example kiara module explain-instance playground.sandbox.example kiara run playground.sandbox.example text_1=\"xxx\" text_2=\"yyy\" To set a different separator in the config for this module, and use that via the cli, you could do: kiara run playground.sandbox.example --module-config separator=\".\" text_1=\"xxx\" text_2=\"yyy\" create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in playground/sandbox.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in playground/sandbox.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs ValueSet the input value set required outputs ValueSet the output value set required Source code in playground/sandbox.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result ) ExampleModuleConfig pydantic-model \u00b6 separator : str pydantic-field \u00b6 The seperator between the two strings.","title":"\u279c\u2007sandbox"},{"location":"api_reference/kiara_modules.playground.sandbox/#kiara_modulesplaygroundsandbox","text":"","title":"kiara_modules.playground.sandbox"},{"location":"api_reference/kiara_modules.playground.sandbox/#kiara_modules.playground.sandbox.ExampleModule","text":"A very simple example module; concatenate two strings. The purpose of this module is to show the main elements of a KiaraModule : the (optional) configuration : must inherit from KiaraModuleConfig , and the config class must be set as the \"_config_cls\" attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with one of the relevant kiara commands: kiara module explain-type playground.sandbox.example kiara module explain-instance playground.sandbox.example kiara run playground.sandbox.example text_1=\"xxx\" text_2=\"yyy\" To set a different separator in the config for this module, and use that via the cli, you could do: kiara run playground.sandbox.example --module-config separator=\".\" text_1=\"xxx\" text_2=\"yyy\"","title":"ExampleModule"},{"location":"api_reference/kiara_modules.playground.sandbox/#kiara_modules.playground.sandbox.ExampleModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in playground/sandbox.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.playground.sandbox/#kiara_modules.playground.sandbox.ExampleModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in playground/sandbox.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.playground.sandbox/#kiara_modules.playground.sandbox.ExampleModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs ValueSet the input value set required outputs ValueSet the output value set required Source code in playground/sandbox.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result )","title":"process()"},{"location":"api_reference/kiara_modules.playground.sandbox/#kiara_modules.playground.sandbox.ExampleModuleConfig","text":"","title":"ExampleModuleConfig"},{"location":"api_reference/kiara_modules.playground.sandbox/#kiara_modules.playground.sandbox.ExampleModuleConfig.separator","text":"The seperator between the two strings.","title":"separator"},{"location":"api_reference/kiara_modules.playground.value_types/","text":"kiara_modules.playground.value_types \u00b6 This module contains the value type classes that are used in the kiara_modules.playground package.","title":"\u279c\u2007value_types"},{"location":"api_reference/kiara_modules.playground.value_types/#kiara_modulesplaygroundvalue_types","text":"This module contains the value type classes that are used in the kiara_modules.playground package.","title":"kiara_modules.playground.value_types"}]}