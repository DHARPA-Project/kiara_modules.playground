{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"kiara modules (playground) \u00b6 A set of commonly used/useful default modules (and pipelines) for Kiara . Documentation: https://dharpa.org/kiara_modules.playground Code: https://github.com/DHARPA-Project/kiara_modules.playground Description \u00b6 TODO Development \u00b6 Requirements \u00b6 Python (version >=3.6 -- some make targets only work for Python >=3.7 though) pip, virtualenv git make direnv (optional) Prepare development environment \u00b6 If you only want to work on the modules, and not the core Kiara codebase, follow the instructions below. Otherwise, please check the notes on how to setup a Kiara development environment under (TODO). git clone https://github.com/DHARPA-Project/kiara_modules.playground.git cd kiara_modules.playground python3 -m venv .venv source .venv/bin/activate make init After this is done, you should be able to run the included example module via: kiara run playground_example text_1=\"xxx\" text_2=\"yyy\" ... ... Re-activate the development environment \u00b6 The 'prepare' step from above only has to be done once. After that, to re-enable your virtual environment, you'll need to navigate to the directory again (wherever that is, in your case), and run the source command from before again: cd path/to/kiara_modules.playground source .venv/bin/activate kiara --help # or whatever, point is, kiara should be available for you now, make targets \u00b6 init : init development project (install project & dev dependencies into virtualenv, as well as pre-commit git hook) update-dependencies : update development dependencies (mainly the core kiara package from git and the main kiara module packages) flake : run flake8 tests mypy : run mypy tests test : run unit tests docs : create static documentation pages (under build/site ) serve-docs : serve documentation pages (incl. auto-reload) for getting direct feedback when working on documentation clean : clean build directories For details (and other, minor targets), check the Makefile . Running tests \u00b6 > make test # or > make coverage Copyright & license \u00b6 This project is MPL v2.0 licensed, for the license text please check the LICENSE file in this repository. Copyright (c) 2021 DHARPA project","title":"Home"},{"location":"index.html#kiara-modules-playground","text":"A set of commonly used/useful default modules (and pipelines) for Kiara . Documentation: https://dharpa.org/kiara_modules.playground Code: https://github.com/DHARPA-Project/kiara_modules.playground","title":"kiara modules (playground)"},{"location":"index.html#description","text":"TODO","title":"Description"},{"location":"index.html#development","text":"","title":"Development"},{"location":"index.html#requirements","text":"Python (version >=3.6 -- some make targets only work for Python >=3.7 though) pip, virtualenv git make direnv (optional)","title":"Requirements"},{"location":"index.html#prepare-development-environment","text":"If you only want to work on the modules, and not the core Kiara codebase, follow the instructions below. Otherwise, please check the notes on how to setup a Kiara development environment under (TODO). git clone https://github.com/DHARPA-Project/kiara_modules.playground.git cd kiara_modules.playground python3 -m venv .venv source .venv/bin/activate make init After this is done, you should be able to run the included example module via: kiara run playground_example text_1=\"xxx\" text_2=\"yyy\" ... ...","title":"Prepare development environment"},{"location":"index.html#re-activate-the-development-environment","text":"The 'prepare' step from above only has to be done once. After that, to re-enable your virtual environment, you'll need to navigate to the directory again (wherever that is, in your case), and run the source command from before again: cd path/to/kiara_modules.playground source .venv/bin/activate kiara --help # or whatever, point is, kiara should be available for you now,","title":"Re-activate the development environment"},{"location":"index.html#make-targets","text":"init : init development project (install project & dev dependencies into virtualenv, as well as pre-commit git hook) update-dependencies : update development dependencies (mainly the core kiara package from git and the main kiara module packages) flake : run flake8 tests mypy : run mypy tests test : run unit tests docs : create static documentation pages (under build/site ) serve-docs : serve documentation pages (incl. auto-reload) for getting direct feedback when working on documentation clean : clean build directories For details (and other, minor targets), check the Makefile .","title":"make targets"},{"location":"index.html#running-tests","text":"> make test # or > make coverage","title":"Running tests"},{"location":"index.html#copyright-license","text":"This project is MPL v2.0 licensed, for the license text please check the LICENSE file in this repository. Copyright (c) 2021 DHARPA project","title":"Copyright &amp; license"},{"location":"modules_list.html","text":"Available module types \u00b6 This page contains a list of all available Kiara module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type. array.map \u00b6 \u256d\u2500 Module: map \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Map a list of values into another list of \u2502 \u2502 values. \u2502 \u2502 \u2502 \u2502 This module must be configured with the type \u2502 \u2502 (and optional) configuration of another kiara \u2502 \u2502 module. This 'child' module will then be used \u2502 \u2502 to compute the array items of the result. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, array \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name MapModule \u2502 \u2502 module_name kiara_modules.core.array \u2502 \u2502 full_name kiara_modules.core.array.MapModu\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 input_array: pa.Array = inputs.get_value_d\u2026 \u2502 \u2502 \u2502 \u2502 init_data: typing.Dict[str, typing.Any] = \u2026 \u2502 \u2502 for input_name in self.input_schemas.keys(\u2026 \u2502 \u2502 if input_name in [\"array\", self.module\u2026 \u2502 \u2502 continue \u2502 \u2502 \u2502 \u2502 init_data[input_name] = inputs.get_val\u2026 \u2502 \u2502 \u2502 \u2502 result_list = map_with_module( \u2502 \u2502 input_array, \u2502 \u2502 module_input_name=self.module_input_na\u2026 \u2502 \u2502 module_obj=self.child_module, \u2502 \u2502 init_data=init_data, \u2502 \u2502 module_output_name=self.module_output_\u2026 \u2502 \u2502 ) \u2502 \u2502 outputs.set_value(\"array\", pa.array(result\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f array.metadata \u00b6 \u256d\u2500 Module: metadata \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Extract metadata from an 'array' value. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, array \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ArrayMetadataModule \u2502 \u2502 module_name kiara_modules.core.array \u2502 \u2502 full_name kiara_modules.core.array.ArrayMe\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"value_item\") \u2502 \u2502 if value.value_schema.type != self.value_t\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't extract metadata for value\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"item_metadata_schema\", \u2026 \u2502 \u2502 metadata = self.extract_metadata(value) \u2502 \u2502 if isinstance(metadata, BaseModel): \u2502 \u2502 metadata = metadata.dict() \u2502 \u2502 \u2502 \u2502 # TODO: validate metadata? \u2502 \u2502 outputs.set_value(\"item_metadata\", metadat\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f array.save \u00b6 \u256d\u2500 Module: save \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Save an Arrow array to a file. \u2502 \u2502 \u2502 \u2502 This module wraps the input array into an Arrow \u2502 \u2502 Table, and saves this table as a feather file. \u2502 \u2502 \u2502 \u2502 The output of this module is a dictionary \u2502 \u2502 representing the configuration to be used with \u2502 \u2502 kira to re-assemble the array object from disk. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, array \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name SaveArrayModule \u2502 \u2502 module_name kiara_modules.core.array \u2502 \u2502 full_name kiara_modules.core.array.SaveArr\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 array: pa.Array = inputs.get_value_data(\"a\u2026 \u2502 \u2502 folder = inputs.get_value_data(\"folder_pat\u2026 \u2502 \u2502 file_name = inputs.get_value_data(\"file_na\u2026 \u2502 \u2502 column_name = inputs.get_value_data(\"colum\u2026 \u2502 \u2502 \u2502 \u2502 if not column_name: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 \"Can't save array, column name not\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 path = os.path.join(folder, file_name) \u2502 \u2502 if os.path.exists(path): \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't write file, path already e\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 os.makedirs(os.path.dirname(path)) \u2502 \u2502 \u2502 \u2502 table = pa.Table.from_arrays([array], name\u2026 \u2502 \u2502 feather.write_feather(table, path) \u2502 \u2502 \u2502 \u2502 load_config = { \u2502 \u2502 \"module_type\": \"array.load_array_from_\u2026 \u2502 \u2502 \"inputs\": {\"path\": path, \"format\": \"fe\u2026 \u2502 \u2502 \"output_name\": \"array\", \u2502 \u2502 } \u2502 \u2502 outputs.set_value(\"load_config\", load_conf\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f date.extract_from_string \u00b6 \u256d\u2500 Module: extract_from_string \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Extract a date object from a string. \u2502 \u2502 \u2502 \u2502 This module is not really smart yet, currently \u2502 \u2502 it uses the following regex to extract a date \u2502 \u2502 (which might fail in a lot of cases): \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 r\"_(\\d{4}-\\d{2}-\\d{2})_\" \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ExtractDateModule \u2502 \u2502 module_name kiara_modules.core.date \u2502 \u2502 full_name kiara_modules.core.date.ExtractD\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 text = inputs.get_value_data(\"text\") \u2502 \u2502 date_match = re.findall(r\"_(\\d{4}-\\d{2}-\\d\u2026 \u2502 \u2502 assert date_match \u2502 \u2502 \u2502 \u2502 d_obj = parser.parse(date_match[0]) # typ\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"date\", d_obj) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f date.range_check \u00b6 \u256d\u2500 Module: range_check \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Check whether a date falls within a specified \u2502 \u2502 date range. \u2502 \u2502 \u2502 \u2502 If none one of the inputs 'earliest' or \u2502 \u2502 'latest' is set, this module will always return \u2502 \u2502 'True'. \u2502 \u2502 \u2502 \u2502 Return True if that's the case, otherwise \u2502 \u2502 False. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name DateRangeCheckModule \u2502 \u2502 module_name kiara_modules.core.date \u2502 \u2502 full_name kiara_modules.core.date.DateRang\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 d = inputs.get_value_data(\"date\") \u2502 \u2502 earliest: typing.Optional[datetime.datetim\u2026 \u2502 \u2502 latest: typing.Optional[datetime.datetime]\u2026 \u2502 \u2502 \u2502 \u2502 if not earliest and not latest: \u2502 \u2502 outputs.set_value(\"within_range\", True) \u2502 \u2502 return \u2502 \u2502 \u2502 \u2502 if hasattr(d, \"as_py\"): \u2502 \u2502 d = d.as_py() \u2502 \u2502 \u2502 \u2502 if isinstance(d, str): \u2502 \u2502 d = parser.parse(d) \u2502 \u2502 \u2502 \u2502 if earliest and latest: \u2502 \u2502 matches = earliest <= d <= latest \u2502 \u2502 elif earliest: \u2502 \u2502 matches = earliest <= d \u2502 \u2502 else: \u2502 \u2502 matches = d <= latest \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"within_range\", matches) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f dev.dummy \u00b6 \u256d\u2500 Module: dummy \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Module that simulates processing, but uses \u2502 \u2502 hard-coded outputs as a result. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name DummyModule \u2502 \u2502 module_name kiara_modules.core.dev \u2502 \u2502 full_name kiara_modules.core.dev.DummyModu\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \"\"\"Returns the hardcoded output values tha\u2026 \u2502 \u2502 \u2502 \u2502 Optionally, this module can simulate proce\u2026 \u2502 \u2502 \"\"\" \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # ty\u2026 \u2502 \u2502 \u2502 \u2502 output_values: typing.Mapping = self.confi\u2026 \u2502 \u2502 \u2502 \u2502 value_dict = {} \u2502 \u2502 for output_name in self.output_names: \u2502 \u2502 if output_name not in output_values.ke\u2026 \u2502 \u2502 raise NotImplementedError() \u2502 \u2502 # v = self.output_schemas[output_n\u2026 \u2502 \u2502 # value_dict[output_name] = v \u2502 \u2502 else: \u2502 \u2502 value_dict[output_name] = output_v\u2026 \u2502 \u2502 outputs.set_values(**value_dict) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f generic.data_profile \u00b6 \u256d\u2500 Module: data_profile \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Generate a data profile report for a dataset. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name DataProfilerModule \u2502 \u2502 module_name kiara_modules.core.generic \u2502 \u2502 full_name kiara_modules.core.generic.DataP\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 from dataprofiler import Profiler \u2502 \u2502 \u2502 \u2502 item: Table = inputs.get_value_data(\"item\") \u2502 \u2502 pd = item.to_pandas() \u2502 \u2502 profile = Profiler(pd) # Calculate Statis\u2026 \u2502 \u2502 report = profile.report() \u2502 \u2502 outputs.set_value(\"report\", report) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f json.to_json \u00b6 \u256d\u2500 Module: to_json \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Convert arbitrary types into json. \u2502 \u2502 \u2502 \u2502 Very early days for this module, it doesn't \u2502 \u2502 support a lot of types yet. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ToJsonModule \u2502 \u2502 module_name kiara_modules.core.json \u2502 \u2502 full_name kiara_modules.core.json.ToJsonMo\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"source_value\u2026 \u2502 \u2502 if value.value_schema.type != self.source_\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't convert value of source ty\u2026 \u2502 \u2502 ) \u2502 \u2502 config = inputs.get_value_data(\"config\") \u2502 \u2502 if config is None: \u2502 \u2502 config = {} \u2502 \u2502 \u2502 \u2502 target_value = self.convert(value=value, c\u2026 \u2502 \u2502 # TODO: validate value? \u2502 \u2502 outputs.set_value(\"target_value\", target_v\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f list.contains \u00b6 \u256d\u2500 Module: contains \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Check whether an element is in a list. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name IncludedInListCheckModule \u2502 \u2502 module_name kiara_modules.core.list \u2502 \u2502 full_name kiara_modules.core.list.Included\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 item_list = inputs.get_value_data(\"list\") \u2502 \u2502 item = inputs.get_value_data(\"item\") \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"is_included\", item in i\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f logic.and \u00b6 \u256d\u2500 Module: and \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Returns 'True' if both inputs are 'True'. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name AndModule \u2502 \u2502 module_name kiara_modules.core.logic \u2502 \u2502 full_name kiara_modules.core.logic.AndModu\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.delay) # type: ign\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_value( \u2502 \u2502 \"y\", inputs.get_value_data(\"a\") and in\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f logic.not \u00b6 \u256d\u2500 Module: not \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Negates the input. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name NotModule \u2502 \u2502 module_name kiara_modules.core.logic \u2502 \u2502 full_name kiara_modules.core.logic.NotModu\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \"\"\"Negates the input boolean.\"\"\" \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # ty\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"y\", not inputs.get_valu\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f logic.or \u00b6 \u256d\u2500 Module: or \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Returns 'True' if one of the inputs is 'True'. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name OrModule \u2502 \u2502 module_name kiara_modules.core.logic \u2502 \u2502 full_name kiara_modules.core.logic.OrModule \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # ty\u2026 \u2502 \u2502 outputs.set_value(\"y\", inputs.get_value_da\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f metadata.python_class \u00b6 \u256d\u2500 Module: metadata.python_class \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Extract metadata about the Python type of this \u2502 \u2502 value. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ExtractPythonClass \u2502 \u2502 module_name kiara.modules.metadata \u2502 \u2502 full_name kiara.modules.metadata.ExtractPy\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"value_item\") \u2502 \u2502 if value.value_schema.type != self.value_t\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't extract metadata for value\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"item_metadata_schema\", \u2026 \u2502 \u2502 metadata = self.extract_metadata(value) \u2502 \u2502 if isinstance(metadata, BaseModel): \u2502 \u2502 metadata = metadata.dict() \u2502 \u2502 \u2502 \u2502 # TODO: validate metadata? \u2502 \u2502 outputs.set_value(\"item_metadata\", metadat\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f onboarding.file.import \u00b6 \u256d\u2500 Module: import \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Read a file into the data registry. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, onboarding \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ImportLocalFileModule \u2502 \u2502 module_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 full_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 print(\"path\") \u2502 \u2502 path = inputs.get_value_data(\"path\") \u2502 \u2502 file_model = FileMetadata.import_file(path) \u2502 \u2502 outputs.set_value(\"file\", file_model) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f onboarding.file.metadata \u00b6 \u256d\u2500 Module: metadata \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, onboarding \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name FileMetadataModule \u2502 \u2502 module_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 full_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"value_item\") \u2502 \u2502 if value.value_schema.type != self.value_t\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't extract metadata for value\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"item_metadata_schema\", \u2026 \u2502 \u2502 metadata = self.extract_metadata(value) \u2502 \u2502 if isinstance(metadata, BaseModel): \u2502 \u2502 metadata = metadata.dict() \u2502 \u2502 \u2502 \u2502 # TODO: validate metadata? \u2502 \u2502 outputs.set_value(\"item_metadata\", metadat\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f onboarding.file_bundle.metadata \u00b6 \u256d\u2500 Module: metadata \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, onboarding \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name FileBundleMetadataModule \u2502 \u2502 module_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 full_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"value_item\") \u2502 \u2502 if value.value_schema.type != self.value_t\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't extract metadata for value\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"item_metadata_schema\", \u2026 \u2502 \u2502 metadata = self.extract_metadata(value) \u2502 \u2502 if isinstance(metadata, BaseModel): \u2502 \u2502 metadata = metadata.dict() \u2502 \u2502 \u2502 \u2502 # TODO: validate metadata? \u2502 \u2502 outputs.set_value(\"item_metadata\", metadat\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f onboarding.file_bundle.save \u00b6 \u256d\u2500 Module: save \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Save a file bundle to disk. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, onboarding \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name SaveFileBundle \u2502 \u2502 module_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 full_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 bundle: FileBundleMetadata = inputs.get_va\u2026 \u2502 \u2502 target: str = inputs.get_value_data(\"targe\u2026 \u2502 \u2502 fm = bundle.save(target) \u2502 \u2502 outputs.set_value(\"files\", fm) \u2502 \u2502 \u2502 \u2502 load_config = { \u2502 \u2502 \"module_type\": \"onboarding.import_loca\u2026 \u2502 \u2502 \"inputs\": {\"path\": target}, \u2502 \u2502 \"output_name\": \"file_bundle\", \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"load_config\", load_conf\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f onboarding.folder.import \u00b6 \u256d\u2500 Module: import \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Import a local folder and its metadata. \u2502 \u2502 \u2502 \u2502 This module is usually the first step to import \u2502 \u2502 a local folder into the kiara data store. It is \u2502 \u2502 necessary, because the folder needs to be \u2502 \u2502 copied to a different location, so we can be \u2502 \u2502 sure it isn't modified outside of kiara. In \u2502 \u2502 most cases, this step will be followed by a \u2502 \u2502 onboarding.file_bundle.save step. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, onboarding \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ImportFolderModule \u2502 \u2502 module_name kiara_modules.core.onboarding.fo\u2026 \u2502 \u2502 full_name kiara_modules.core.onboarding.fo\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 path = inputs.get_value_data(\"path\") \u2502 \u2502 \u2502 \u2502 included_files = inputs.get_value_data(\"in\u2026 \u2502 \u2502 excluded_dirs = inputs.get_value_data(\"exc\u2026 \u2502 \u2502 \u2502 \u2502 import_config = FolderImportConfig( \u2502 \u2502 include_files=included_files, exclude_\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 bundle = FileBundleMetadata.import_folder( \u2502 \u2502 source=path, import_config=import_conf\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_values(file_bundle=bundle) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f playground.lena.graph_components \u00b6 \u256d\u2500 Module: graph_components \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 Lena Jaskov (helena.jaskov@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags playground \u2502 \u2502 Labels package: kiara_modules.playground \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name GrpahComponentsModule \u2502 \u2502 module_name kiara_modules.playground.lena \u2502 \u2502 full_name kiara_modules.playground.lena.Gr\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"find_largest_com\u2026 \u2502 \u2502 input_graph: Graph = inputs.get_value_\u2026 \u2502 \u2502 undir_graph = nx.to_undirected(input_g\u2026 \u2502 \u2502 undir_components = nx.connected_compon\u2026 \u2502 \u2502 lg_component = max(undir_components, k\u2026 \u2502 \u2502 subgraph = input_graph.subgraph(lg_com\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_values(largest_component=s\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"number_of_compon\u2026 \u2502 \u2502 input_graph = inputs.get_value_data(\"g\u2026 \u2502 \u2502 undir_graph = nx.to_undirected(input_g\u2026 \u2502 \u2502 number_of_components = nx.number_conne\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_values(number_of_component\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f playground.markus.from_file \u00b6 \u256d\u2500 Module: from_file \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Load table-like data from a kiara file object \u2502 \u2502 (not a path!). \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags playground \u2502 \u2502 Labels package: kiara_modules.playground \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name CreateGraphFromFileModule \u2502 \u2502 module_name kiara_modules.playground.markus \u2502 \u2502 full_name kiara_modules.playground.markus.\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 input_file: FileMetadata = inputs.get_valu\u2026 \u2502 \u2502 imported_data = csv.read_csv(input_file.pa\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"allow_column_fil\u2026 \u2502 \u2502 if self.get_config_value(\"columns\"): \u2502 \u2502 imported_data = imported_data.sele\u2026 \u2502 \u2502 self.get_config_value(\"only_co\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", imported_data) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f playground.playground.example \u00b6 \u256d\u2500 Module: example \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 A very simple example module; concatenate two \u2502 \u2502 strings. \u2502 \u2502 \u2502 \u2502 The purpose of this module is to show the main \u2502 \u2502 elements of a KiaraModule: \u2502 \u2502 \u2502 \u2502 the (optional) configuration : must inherit \u2502 \u2502 from KiaraModuleConfig, and the config class \u2502 \u2502 must be set as the \"_config_cls\" attribute on \u2502 \u2502 the KiaraModule class. Configuration values can \u2502 \u2502 be retrieved via the self.get_config_value(key) \u2502 \u2502 method \u2502 \u2502 \u2502 \u2502 the inputs description : must return a \u2502 \u2502 dictionary, containing the input name(s) as \u2502 \u2502 keys, and another dictionary containing type \u2502 \u2502 information and documentation about the input \u2502 \u2502 data as value \u2502 \u2502 \u2502 \u2502 the outputs description : must return a \u2502 \u2502 dictionary, containing the output name(s) as \u2502 \u2502 keys, and another dictionary containing type \u2502 \u2502 information and documentation about the output \u2502 \u2502 data as value \u2502 \u2502 \u2502 \u2502 the process method : this is where the \u2502 \u2502 actual work gets done. Input data can be \u2502 \u2502 accessed via inputs.get_value_data(key), \u2502 \u2502 results can be set with the \u2502 \u2502 outputs.set_value(key, value) method \u2502 \u2502 \u2502 \u2502 Examples: \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 This example module can be tested on the c\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 kiara module explain-type playground.p\u2026 \u2502 \u2502 \u2502 \u2502 kiara module explain-instance playgrou\u2026 \u2502 \u2502 \u2502 \u2502 kiara run playground.playground.exampl\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 To set a different separator in the config\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 kiara run playground.playground.exampl\u2026 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags playground \u2502 \u2502 Labels package: kiara_modules.playground \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ExampleModule \u2502 \u2502 module_name kiara_modules.playground.playgro\u2026 \u2502 \u2502 full_name kiara_modules.playground.playgro\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 separator = self.get_config_value(\"separat\u2026 \u2502 \u2502 \u2502 \u2502 text_1 = inputs.get_value_data(\"text_1\") \u2502 \u2502 text_2 = inputs.get_value_data(\"text_2\") \u2502 \u2502 \u2502 \u2502 result = text_1 + separator + text_2 \u2502 \u2502 outputs.set_value(\"text\", result) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f string.match_regex \u00b6 \u256d\u2500 Module: match_regex \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Match a string using a regular expression. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name RegexModule \u2502 \u2502 module_name kiara_modules.core.string \u2502 \u2502 full_name kiara_modules.core.string.RegexM\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 text = inputs.get_value_data(\"text\") \u2502 \u2502 regex = self.get_config_value(\"regex\") \u2502 \u2502 matches = re.findall(regex, text) \u2502 \u2502 \u2502 \u2502 if not matches: \u2502 \u2502 raise KiaraProcessingException(f\"No ma\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"only_first_match\u2026 \u2502 \u2502 result = matches[0] \u2502 \u2502 else: \u2502 \u2502 result = matches \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"text\", result) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f string.pretty_print \u00b6 \u256d\u2500 Module: pretty_print \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Pretty print arbitrary types. \u2502 \u2502 \u2502 \u2502 For now, this module only supports a few \u2502 \u2502 selected types. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name PrettyPrintModule \u2502 \u2502 module_name kiara_modules.core.string \u2502 \u2502 full_name kiara_modules.core.string.Pretty\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 input_value: Value = inputs.get_value_data\u2026 \u2502 \u2502 \u2502 \u2502 if isinstance(input_value, pyarrow.Table): \u2502 \u2502 value_type = \"table\" \u2502 \u2502 elif isinstance(input_value, ValueSet): \u2502 \u2502 value_type = \"value_set\" \u2502 \u2502 else: \u2502 \u2502 value_type = \"any\" \u2502 \u2502 \u2502 \u2502 render_config = {} \u2502 \u2502 for field in inputs.get_all_field_names(): \u2502 \u2502 value = inputs.get_value_obj(field) \u2502 \u2502 if field == \"item\": \u2502 \u2502 continue \u2502 \u2502 render_config[field] = value.get_value\u2026 \u2502 \u2502 \u2502 \u2502 input_value_str = convert_to_renderable( \u2502 \u2502 value_type=value_type, data=input_valu\u2026 \u2502 \u2502 ) \u2502 \u2502 outputs.set_value(\"renderables\", input_val\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f string.replace \u00b6 \u256d\u2500 Module: replace \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Replace a string if it matches a key in a \u2502 \u2502 mapping dictionary. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ReplaceStringModule \u2502 \u2502 module_name kiara_modules.core.string \u2502 \u2502 full_name kiara_modules.core.string.Replac\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 text = inputs.get_value_data(\"text\") \u2502 \u2502 repl_map = self.get_config_value(\"replacem\u2026 \u2502 \u2502 default = self.get_config_value(\"default_v\u2026 \u2502 \u2502 \u2502 \u2502 if text not in repl_map.keys(): \u2502 \u2502 if default is None: \u2502 \u2502 result = text \u2502 \u2502 else: \u2502 \u2502 result = default \u2502 \u2502 else: \u2502 \u2502 result = repl_map[text] \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"text\", result) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f string.to_string \u00b6 \u256d\u2500 Module: to_string \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Convert arbitrary types into strings. \u2502 \u2502 \u2502 \u2502 Early days for this module, not a lot of source \u2502 \u2502 types are supported just yet. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ToStringModule \u2502 \u2502 module_name kiara_modules.core.string \u2502 \u2502 full_name kiara_modules.core.string.ToStri\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"source_value\u2026 \u2502 \u2502 if value.value_schema.type != self.source_\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't convert value of source ty\u2026 \u2502 \u2502 ) \u2502 \u2502 config = inputs.get_value_data(\"config\") \u2502 \u2502 if config is None: \u2502 \u2502 config = {} \u2502 \u2502 \u2502 \u2502 target_value = self.convert(value=value, c\u2026 \u2502 \u2502 # TODO: validate value? \u2502 \u2502 outputs.set_value(\"target_value\", target_v\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f table.cut_column \u00b6 \u256d\u2500 Module: cut_column \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Cut off one column from a table, returning an \u2502 \u2502 array. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name CutColumnModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.CutColu\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 table_value = inputs.get_value_obj(\"table\") \u2502 \u2502 \u2502 \u2502 column_name: str = inputs.get_value_data(\"\u2026 \u2502 \u2502 available = table_value.get_metadata(\"tabl\u2026 \u2502 \u2502 if column_name not in available: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Invalid column name '{column_nam\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 table: pa.Table = inputs.get_value_data(\"t\u2026 \u2502 \u2502 column = table.column(column_name) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"array\", column) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f table.filter.with_mask \u00b6 \u256d\u2500 Module: with_mask \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Filter a table using a mask array. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name CreateFilteredTableModule \u2502 \u2502 module_name kiara_modules.core.table.filter \u2502 \u2502 full_name kiara_modules.core.table.filter.\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 input_table: pa.Table = inputs.get_value_d\u2026 \u2502 \u2502 filter_array: pa.Array = inputs.get_value_\u2026 \u2502 \u2502 \u2502 \u2502 filtered = input_table.filter(filter_array) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", filtered) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f table.from_file \u00b6 \u256d\u2500 Module: from_file \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Load table-like data from a kiara file object \u2502 \u2502 (not a path!). \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name CreateTableFromFileModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.CreateT\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 input_file: FileMetadata = inputs.get_valu\u2026 \u2502 \u2502 imported_data = csv.read_csv(input_file.pa\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"allow_column_fil\u2026 \u2502 \u2502 if self.get_config_value(\"columns\"): \u2502 \u2502 imported_data = imported_data.sele\u2026 \u2502 \u2502 self.get_config_value(\"only_co\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", imported_data) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f table.from_file_bundle \u00b6 \u256d\u2500 Module: from_file_bundle \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Create a table from a 'file_bundle'. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name CreateTableFromTextFilesModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.CreateT\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 bundle: FileBundleMetadata = inputs.get_va\u2026 \u2502 \u2502 \u2502 \u2502 columns = self.get_config_value(\"columns\") \u2502 \u2502 if not columns: \u2502 \u2502 columns = DEFAULT_COLUMNS \u2502 \u2502 \u2502 \u2502 if \"content\" in columns: \u2502 \u2502 file_dict = bundle.read_text_file_cont\u2026 \u2502 \u2502 else: \u2502 \u2502 file_dict = {} \u2502 \u2502 for rel_path in bundle.included_files.\u2026 \u2502 \u2502 file_dict[rel_path] = None # type\u2026 \u2502 \u2502 \u2502 \u2502 tabular: typing.Dict[str, typing.List[typi\u2026 \u2502 \u2502 for column in columns: \u2502 \u2502 for index, rel_path in enumerate(sorte\u2026 \u2502 \u2502 \u2502 \u2502 if column == \"content\": \u2502 \u2502 value: typing.Any = file_dict[\u2026 \u2502 \u2502 elif column == \"id\": \u2502 \u2502 value = index \u2502 \u2502 elif column == \"rel_path\": \u2502 \u2502 value = rel_path \u2502 \u2502 else: \u2502 \u2502 file_model = bundle.included_f\u2026 \u2502 \u2502 value = getattr(file_model, co\u2026 \u2502 \u2502 \u2502 \u2502 tabular.setdefault(column, []).app\u2026 \u2502 \u2502 \u2502 \u2502 table = pa.Table.from_pydict(tabular) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", table) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f table.load \u00b6 \u256d\u2500 Module: load \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Load a table object from disk. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name LoadArrowTable \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.LoadArr\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 path = inputs.get_value_data(\"path\") \u2502 \u2502 format = inputs.get_value_data(\"format\") \u2502 \u2502 \u2502 \u2502 if format != \"feather\": \u2502 \u2502 raise NotImplementedError() \u2502 \u2502 \u2502 \u2502 table = feather.read_table(path) \u2502 \u2502 outputs.set_value(\"table\", table) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f table.map_column \u00b6 \u256d\u2500 Module: map_column \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Map the items of one column of a table onto an \u2502 \u2502 array, using another module. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name MapColumnModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.MapColu\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 table: pa.Table = inputs.get_value_data(\"t\u2026 \u2502 \u2502 column_name = inputs.get_value_data(\"colum\u2026 \u2502 \u2502 \u2502 \u2502 if column_name not in table.column_names: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Table column '{column_name}' not\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 input_array: pa.Array = table.column(colum\u2026 \u2502 \u2502 \u2502 \u2502 init_data: typing.Dict[str, typing.Any] = \u2026 \u2502 \u2502 for input_name in self.input_schemas.keys(\u2026 \u2502 \u2502 if input_name in [\"table\", \"column_nam\u2026 \u2502 \u2502 continue \u2502 \u2502 \u2502 \u2502 init_data[input_name] = inputs.get_val\u2026 \u2502 \u2502 \u2502 \u2502 result_list = map_with_module( \u2502 \u2502 input_array, \u2502 \u2502 module_input_name=self.module_input_na\u2026 \u2502 \u2502 module_obj=self.child_module, \u2502 \u2502 init_data=init_data, \u2502 \u2502 module_output_name=self.module_output_\u2026 \u2502 \u2502 ) \u2502 \u2502 outputs.set_value(\"array\", pa.array(result\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f table.merge \u00b6 \u256d\u2500 Module: merge \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Create a table from other tables and/or arrays. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name MergeTableModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.MergeTa\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 sources = inputs.get_value_data(\"sources\") \u2502 \u2502 \u2502 \u2502 len_dict = {} \u2502 \u2502 arrays = [] \u2502 \u2502 column_names = [] \u2502 \u2502 for source_key, table_or_column in sources\u2026 \u2502 \u2502 \u2502 \u2502 if isinstance(table_or_column, pa.Tabl\u2026 \u2502 \u2502 rows = table_or_column.num_rows \u2502 \u2502 for name in table_or_column.schema\u2026 \u2502 \u2502 column = table_or_column.colum\u2026 \u2502 \u2502 arrays.append(column) \u2502 \u2502 column_names.append(name) \u2502 \u2502 \u2502 \u2502 elif isinstance(table_or_column, pa.Ar\u2026 \u2502 \u2502 rows = len(table_or_column) \u2502 \u2502 arrays.append(table_or_column) \u2502 \u2502 column_names.append(source_key) \u2502 \u2502 else: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't merge table: invalid t\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 len_dict[source_key] = rows \u2502 \u2502 \u2502 \u2502 all_rows = None \u2502 \u2502 for source_key, rows in len_dict.items(): \u2502 \u2502 if all_rows is None: \u2502 \u2502 all_rows = rows \u2502 \u2502 else: \u2502 \u2502 if all_rows != rows: \u2502 \u2502 all_rows = None \u2502 \u2502 break \u2502 \u2502 \u2502 \u2502 if all_rows is None: \u2502 \u2502 len_str = \"\" \u2502 \u2502 for name, rows in len_dict.items(): \u2502 \u2502 len_str = f\" {name} ({rows})\" \u2502 \u2502 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't merge table, sources have \u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 table = pa.Table.from_arrays(arrays=arrays\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", table) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f table.metadata \u00b6 \u256d\u2500 Module: metadata \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Extract metadata from a table object. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name TableMetadataModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.TableMe\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"value_item\") \u2502 \u2502 if value.value_schema.type != self.value_t\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't extract metadata for value\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"item_metadata_schema\", \u2026 \u2502 \u2502 metadata = self.extract_metadata(value) \u2502 \u2502 if isinstance(metadata, BaseModel): \u2502 \u2502 metadata = metadata.dict() \u2502 \u2502 \u2502 \u2502 # TODO: validate metadata? \u2502 \u2502 outputs.set_value(\"item_metadata\", metadat\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f table.query.graphql \u00b6 \u256d\u2500 Module: graphql \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Execute a graphql aggregation query against an \u2502 \u2502 (Arrow) table. \u2502 \u2502 \u2502 \u2502 References: - \u2502 \u2502 https://vaex.io/docs/example_graphql.html \u2502 \u2502 \u2502 \u2502 Examples: An example for a query could be: \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 ``` \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 df(where: { \u2502 \u2502 \u2502 \u2502 Language: {_eq: \"German\"} \u2502 \u2502 \u2502 \u2502 } ) { \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 row(limit: 10) { \u2502 \u2502 \u2502 \u2502 Label \u2502 \u2502 \u2502 \u2502 City \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ``` \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name QueryTableGraphQL \u2502 \u2502 module_name kiara_modules.core.table.query \u2502 \u2502 full_name kiara_modules.core.table.query.Q\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 table = inputs.get_value_data(\"table\") \u2502 \u2502 query = inputs.get_value_data(\"query\") \u2502 \u2502 \u2502 \u2502 df = vaex.from_arrow_table(table) \u2502 \u2502 \u2502 \u2502 result = df.graphql.execute(query) \u2502 \u2502 outputs.set_value(\"query_result\", result.t\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f table.save \u00b6 \u256d\u2500 Module: save \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Save a table object to disk. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name SaveArrowTable \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.SaveArr\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 table: pa.Table = inputs.get_value_data(\"t\u2026 \u2502 \u2502 path: str = inputs.get_value_data(\"folder_\u2026 \u2502 \u2502 file_name: str = inputs.get_value_data(\"fi\u2026 \u2502 \u2502 full_path = os.path.join(path, file_name) \u2502 \u2502 force_overwrite = inputs.get_value_data(\"f\u2026 \u2502 \u2502 \u2502 \u2502 if os.path.exists(full_path) and not force\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't write table to file, file \u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 os.makedirs(path, exist_ok=True) \u2502 \u2502 \u2502 \u2502 feather.write_feather(table, full_path) \u2502 \u2502 \u2502 \u2502 result = { \u2502 \u2502 \"module_type\": \"table.load\", \u2502 \u2502 \"inputs\": {\"path\": full_path, \"format\"\u2026 \u2502 \u2502 \"output_name\": \"table\", \u2502 \u2502 } \u2502 \u2502 outputs.set_value(\"load_config\", result) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f yaml.to_yaml \u00b6 \u256d\u2500 Module: to_yaml \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Convert arbitrary types into YAML format. \u2502 \u2502 \u2502 \u2502 Early days for this module, it doesn't support \u2502 \u2502 a whole lot of types yet. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ToYamlModule \u2502 \u2502 module_name kiara_modules.core.yaml \u2502 \u2502 full_name kiara_modules.core.yaml.ToYamlMo\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"source_value\u2026 \u2502 \u2502 if value.value_schema.type != self.source_\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't convert value of source ty\u2026 \u2502 \u2502 ) \u2502 \u2502 config = inputs.get_value_data(\"config\") \u2502 \u2502 if config is None: \u2502 \u2502 config = {} \u2502 \u2502 \u2502 \u2502 target_value = self.convert(value=value, c\u2026 \u2502 \u2502 # TODO: validate value? \u2502 \u2502 outputs.set_value(\"target_value\", target_v\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Included modules"},{"location":"modules_list.html#available-module-types","text":"This page contains a list of all available Kiara module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Available module types"},{"location":"modules_list.html#arraymap","text":"\u256d\u2500 Module: map \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Map a list of values into another list of \u2502 \u2502 values. \u2502 \u2502 \u2502 \u2502 This module must be configured with the type \u2502 \u2502 (and optional) configuration of another kiara \u2502 \u2502 module. This 'child' module will then be used \u2502 \u2502 to compute the array items of the result. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, array \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name MapModule \u2502 \u2502 module_name kiara_modules.core.array \u2502 \u2502 full_name kiara_modules.core.array.MapModu\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 input_array: pa.Array = inputs.get_value_d\u2026 \u2502 \u2502 \u2502 \u2502 init_data: typing.Dict[str, typing.Any] = \u2026 \u2502 \u2502 for input_name in self.input_schemas.keys(\u2026 \u2502 \u2502 if input_name in [\"array\", self.module\u2026 \u2502 \u2502 continue \u2502 \u2502 \u2502 \u2502 init_data[input_name] = inputs.get_val\u2026 \u2502 \u2502 \u2502 \u2502 result_list = map_with_module( \u2502 \u2502 input_array, \u2502 \u2502 module_input_name=self.module_input_na\u2026 \u2502 \u2502 module_obj=self.child_module, \u2502 \u2502 init_data=init_data, \u2502 \u2502 module_output_name=self.module_output_\u2026 \u2502 \u2502 ) \u2502 \u2502 outputs.set_value(\"array\", pa.array(result\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"array.map"},{"location":"modules_list.html#arraymetadata","text":"\u256d\u2500 Module: metadata \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Extract metadata from an 'array' value. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, array \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ArrayMetadataModule \u2502 \u2502 module_name kiara_modules.core.array \u2502 \u2502 full_name kiara_modules.core.array.ArrayMe\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"value_item\") \u2502 \u2502 if value.value_schema.type != self.value_t\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't extract metadata for value\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"item_metadata_schema\", \u2026 \u2502 \u2502 metadata = self.extract_metadata(value) \u2502 \u2502 if isinstance(metadata, BaseModel): \u2502 \u2502 metadata = metadata.dict() \u2502 \u2502 \u2502 \u2502 # TODO: validate metadata? \u2502 \u2502 outputs.set_value(\"item_metadata\", metadat\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"array.metadata"},{"location":"modules_list.html#arraysave","text":"\u256d\u2500 Module: save \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Save an Arrow array to a file. \u2502 \u2502 \u2502 \u2502 This module wraps the input array into an Arrow \u2502 \u2502 Table, and saves this table as a feather file. \u2502 \u2502 \u2502 \u2502 The output of this module is a dictionary \u2502 \u2502 representing the configuration to be used with \u2502 \u2502 kira to re-assemble the array object from disk. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, array \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name SaveArrayModule \u2502 \u2502 module_name kiara_modules.core.array \u2502 \u2502 full_name kiara_modules.core.array.SaveArr\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 array: pa.Array = inputs.get_value_data(\"a\u2026 \u2502 \u2502 folder = inputs.get_value_data(\"folder_pat\u2026 \u2502 \u2502 file_name = inputs.get_value_data(\"file_na\u2026 \u2502 \u2502 column_name = inputs.get_value_data(\"colum\u2026 \u2502 \u2502 \u2502 \u2502 if not column_name: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 \"Can't save array, column name not\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 path = os.path.join(folder, file_name) \u2502 \u2502 if os.path.exists(path): \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't write file, path already e\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 os.makedirs(os.path.dirname(path)) \u2502 \u2502 \u2502 \u2502 table = pa.Table.from_arrays([array], name\u2026 \u2502 \u2502 feather.write_feather(table, path) \u2502 \u2502 \u2502 \u2502 load_config = { \u2502 \u2502 \"module_type\": \"array.load_array_from_\u2026 \u2502 \u2502 \"inputs\": {\"path\": path, \"format\": \"fe\u2026 \u2502 \u2502 \"output_name\": \"array\", \u2502 \u2502 } \u2502 \u2502 outputs.set_value(\"load_config\", load_conf\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"array.save"},{"location":"modules_list.html#dateextract_from_string","text":"\u256d\u2500 Module: extract_from_string \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Extract a date object from a string. \u2502 \u2502 \u2502 \u2502 This module is not really smart yet, currently \u2502 \u2502 it uses the following regex to extract a date \u2502 \u2502 (which might fail in a lot of cases): \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 r\"_(\\d{4}-\\d{2}-\\d{2})_\" \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ExtractDateModule \u2502 \u2502 module_name kiara_modules.core.date \u2502 \u2502 full_name kiara_modules.core.date.ExtractD\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 text = inputs.get_value_data(\"text\") \u2502 \u2502 date_match = re.findall(r\"_(\\d{4}-\\d{2}-\\d\u2026 \u2502 \u2502 assert date_match \u2502 \u2502 \u2502 \u2502 d_obj = parser.parse(date_match[0]) # typ\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"date\", d_obj) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"date.extract_from_string"},{"location":"modules_list.html#daterange_check","text":"\u256d\u2500 Module: range_check \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Check whether a date falls within a specified \u2502 \u2502 date range. \u2502 \u2502 \u2502 \u2502 If none one of the inputs 'earliest' or \u2502 \u2502 'latest' is set, this module will always return \u2502 \u2502 'True'. \u2502 \u2502 \u2502 \u2502 Return True if that's the case, otherwise \u2502 \u2502 False. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name DateRangeCheckModule \u2502 \u2502 module_name kiara_modules.core.date \u2502 \u2502 full_name kiara_modules.core.date.DateRang\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 d = inputs.get_value_data(\"date\") \u2502 \u2502 earliest: typing.Optional[datetime.datetim\u2026 \u2502 \u2502 latest: typing.Optional[datetime.datetime]\u2026 \u2502 \u2502 \u2502 \u2502 if not earliest and not latest: \u2502 \u2502 outputs.set_value(\"within_range\", True) \u2502 \u2502 return \u2502 \u2502 \u2502 \u2502 if hasattr(d, \"as_py\"): \u2502 \u2502 d = d.as_py() \u2502 \u2502 \u2502 \u2502 if isinstance(d, str): \u2502 \u2502 d = parser.parse(d) \u2502 \u2502 \u2502 \u2502 if earliest and latest: \u2502 \u2502 matches = earliest <= d <= latest \u2502 \u2502 elif earliest: \u2502 \u2502 matches = earliest <= d \u2502 \u2502 else: \u2502 \u2502 matches = d <= latest \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"within_range\", matches) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"date.range_check"},{"location":"modules_list.html#devdummy","text":"\u256d\u2500 Module: dummy \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Module that simulates processing, but uses \u2502 \u2502 hard-coded outputs as a result. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name DummyModule \u2502 \u2502 module_name kiara_modules.core.dev \u2502 \u2502 full_name kiara_modules.core.dev.DummyModu\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \"\"\"Returns the hardcoded output values tha\u2026 \u2502 \u2502 \u2502 \u2502 Optionally, this module can simulate proce\u2026 \u2502 \u2502 \"\"\" \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # ty\u2026 \u2502 \u2502 \u2502 \u2502 output_values: typing.Mapping = self.confi\u2026 \u2502 \u2502 \u2502 \u2502 value_dict = {} \u2502 \u2502 for output_name in self.output_names: \u2502 \u2502 if output_name not in output_values.ke\u2026 \u2502 \u2502 raise NotImplementedError() \u2502 \u2502 # v = self.output_schemas[output_n\u2026 \u2502 \u2502 # value_dict[output_name] = v \u2502 \u2502 else: \u2502 \u2502 value_dict[output_name] = output_v\u2026 \u2502 \u2502 outputs.set_values(**value_dict) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"dev.dummy"},{"location":"modules_list.html#genericdata_profile","text":"\u256d\u2500 Module: data_profile \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Generate a data profile report for a dataset. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name DataProfilerModule \u2502 \u2502 module_name kiara_modules.core.generic \u2502 \u2502 full_name kiara_modules.core.generic.DataP\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 from dataprofiler import Profiler \u2502 \u2502 \u2502 \u2502 item: Table = inputs.get_value_data(\"item\") \u2502 \u2502 pd = item.to_pandas() \u2502 \u2502 profile = Profiler(pd) # Calculate Statis\u2026 \u2502 \u2502 report = profile.report() \u2502 \u2502 outputs.set_value(\"report\", report) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"generic.data_profile"},{"location":"modules_list.html#jsonto_json","text":"\u256d\u2500 Module: to_json \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Convert arbitrary types into json. \u2502 \u2502 \u2502 \u2502 Very early days for this module, it doesn't \u2502 \u2502 support a lot of types yet. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ToJsonModule \u2502 \u2502 module_name kiara_modules.core.json \u2502 \u2502 full_name kiara_modules.core.json.ToJsonMo\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"source_value\u2026 \u2502 \u2502 if value.value_schema.type != self.source_\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't convert value of source ty\u2026 \u2502 \u2502 ) \u2502 \u2502 config = inputs.get_value_data(\"config\") \u2502 \u2502 if config is None: \u2502 \u2502 config = {} \u2502 \u2502 \u2502 \u2502 target_value = self.convert(value=value, c\u2026 \u2502 \u2502 # TODO: validate value? \u2502 \u2502 outputs.set_value(\"target_value\", target_v\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"json.to_json"},{"location":"modules_list.html#listcontains","text":"\u256d\u2500 Module: contains \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Check whether an element is in a list. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name IncludedInListCheckModule \u2502 \u2502 module_name kiara_modules.core.list \u2502 \u2502 full_name kiara_modules.core.list.Included\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 item_list = inputs.get_value_data(\"list\") \u2502 \u2502 item = inputs.get_value_data(\"item\") \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"is_included\", item in i\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"list.contains"},{"location":"modules_list.html#logicand","text":"\u256d\u2500 Module: and \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Returns 'True' if both inputs are 'True'. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name AndModule \u2502 \u2502 module_name kiara_modules.core.logic \u2502 \u2502 full_name kiara_modules.core.logic.AndModu\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.delay) # type: ign\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_value( \u2502 \u2502 \"y\", inputs.get_value_data(\"a\") and in\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"logic.and"},{"location":"modules_list.html#logicnot","text":"\u256d\u2500 Module: not \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Negates the input. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name NotModule \u2502 \u2502 module_name kiara_modules.core.logic \u2502 \u2502 full_name kiara_modules.core.logic.NotModu\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \"\"\"Negates the input boolean.\"\"\" \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # ty\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"y\", not inputs.get_valu\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"logic.not"},{"location":"modules_list.html#logicor","text":"\u256d\u2500 Module: or \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Returns 'True' if one of the inputs is 'True'. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name OrModule \u2502 \u2502 module_name kiara_modules.core.logic \u2502 \u2502 full_name kiara_modules.core.logic.OrModule \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # ty\u2026 \u2502 \u2502 outputs.set_value(\"y\", inputs.get_value_da\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"logic.or"},{"location":"modules_list.html#metadatapython_class","text":"\u256d\u2500 Module: metadata.python_class \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Extract metadata about the Python type of this \u2502 \u2502 value. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ExtractPythonClass \u2502 \u2502 module_name kiara.modules.metadata \u2502 \u2502 full_name kiara.modules.metadata.ExtractPy\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"value_item\") \u2502 \u2502 if value.value_schema.type != self.value_t\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't extract metadata for value\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"item_metadata_schema\", \u2026 \u2502 \u2502 metadata = self.extract_metadata(value) \u2502 \u2502 if isinstance(metadata, BaseModel): \u2502 \u2502 metadata = metadata.dict() \u2502 \u2502 \u2502 \u2502 # TODO: validate metadata? \u2502 \u2502 outputs.set_value(\"item_metadata\", metadat\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"metadata.python_class"},{"location":"modules_list.html#onboardingfileimport","text":"\u256d\u2500 Module: import \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Read a file into the data registry. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, onboarding \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ImportLocalFileModule \u2502 \u2502 module_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 full_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 print(\"path\") \u2502 \u2502 path = inputs.get_value_data(\"path\") \u2502 \u2502 file_model = FileMetadata.import_file(path) \u2502 \u2502 outputs.set_value(\"file\", file_model) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"onboarding.file.import"},{"location":"modules_list.html#onboardingfilemetadata","text":"\u256d\u2500 Module: metadata \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, onboarding \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name FileMetadataModule \u2502 \u2502 module_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 full_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"value_item\") \u2502 \u2502 if value.value_schema.type != self.value_t\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't extract metadata for value\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"item_metadata_schema\", \u2026 \u2502 \u2502 metadata = self.extract_metadata(value) \u2502 \u2502 if isinstance(metadata, BaseModel): \u2502 \u2502 metadata = metadata.dict() \u2502 \u2502 \u2502 \u2502 # TODO: validate metadata? \u2502 \u2502 outputs.set_value(\"item_metadata\", metadat\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"onboarding.file.metadata"},{"location":"modules_list.html#onboardingfile_bundlemetadata","text":"\u256d\u2500 Module: metadata \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, onboarding \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name FileBundleMetadataModule \u2502 \u2502 module_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 full_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"value_item\") \u2502 \u2502 if value.value_schema.type != self.value_t\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't extract metadata for value\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"item_metadata_schema\", \u2026 \u2502 \u2502 metadata = self.extract_metadata(value) \u2502 \u2502 if isinstance(metadata, BaseModel): \u2502 \u2502 metadata = metadata.dict() \u2502 \u2502 \u2502 \u2502 # TODO: validate metadata? \u2502 \u2502 outputs.set_value(\"item_metadata\", metadat\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"onboarding.file_bundle.metadata"},{"location":"modules_list.html#onboardingfile_bundlesave","text":"\u256d\u2500 Module: save \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Save a file bundle to disk. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, onboarding \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name SaveFileBundle \u2502 \u2502 module_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 full_name kiara_modules.core.onboarding.fi\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 bundle: FileBundleMetadata = inputs.get_va\u2026 \u2502 \u2502 target: str = inputs.get_value_data(\"targe\u2026 \u2502 \u2502 fm = bundle.save(target) \u2502 \u2502 outputs.set_value(\"files\", fm) \u2502 \u2502 \u2502 \u2502 load_config = { \u2502 \u2502 \"module_type\": \"onboarding.import_loca\u2026 \u2502 \u2502 \"inputs\": {\"path\": target}, \u2502 \u2502 \"output_name\": \"file_bundle\", \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"load_config\", load_conf\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"onboarding.file_bundle.save"},{"location":"modules_list.html#onboardingfolderimport","text":"\u256d\u2500 Module: import \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Import a local folder and its metadata. \u2502 \u2502 \u2502 \u2502 This module is usually the first step to import \u2502 \u2502 a local folder into the kiara data store. It is \u2502 \u2502 necessary, because the folder needs to be \u2502 \u2502 copied to a different location, so we can be \u2502 \u2502 sure it isn't modified outside of kiara. In \u2502 \u2502 most cases, this step will be followed by a \u2502 \u2502 onboarding.file_bundle.save step. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, onboarding \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ImportFolderModule \u2502 \u2502 module_name kiara_modules.core.onboarding.fo\u2026 \u2502 \u2502 full_name kiara_modules.core.onboarding.fo\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 path = inputs.get_value_data(\"path\") \u2502 \u2502 \u2502 \u2502 included_files = inputs.get_value_data(\"in\u2026 \u2502 \u2502 excluded_dirs = inputs.get_value_data(\"exc\u2026 \u2502 \u2502 \u2502 \u2502 import_config = FolderImportConfig( \u2502 \u2502 include_files=included_files, exclude_\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 bundle = FileBundleMetadata.import_folder( \u2502 \u2502 source=path, import_config=import_conf\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_values(file_bundle=bundle) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"onboarding.folder.import"},{"location":"modules_list.html#playgroundlenagraph_components","text":"\u256d\u2500 Module: graph_components \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 Lena Jaskov (helena.jaskov@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags playground \u2502 \u2502 Labels package: kiara_modules.playground \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name GrpahComponentsModule \u2502 \u2502 module_name kiara_modules.playground.lena \u2502 \u2502 full_name kiara_modules.playground.lena.Gr\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"find_largest_com\u2026 \u2502 \u2502 input_graph: Graph = inputs.get_value_\u2026 \u2502 \u2502 undir_graph = nx.to_undirected(input_g\u2026 \u2502 \u2502 undir_components = nx.connected_compon\u2026 \u2502 \u2502 lg_component = max(undir_components, k\u2026 \u2502 \u2502 subgraph = input_graph.subgraph(lg_com\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_values(largest_component=s\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"number_of_compon\u2026 \u2502 \u2502 input_graph = inputs.get_value_data(\"g\u2026 \u2502 \u2502 undir_graph = nx.to_undirected(input_g\u2026 \u2502 \u2502 number_of_components = nx.number_conne\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_values(number_of_component\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"playground.lena.graph_components"},{"location":"modules_list.html#playgroundmarkusfrom_file","text":"\u256d\u2500 Module: from_file \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Load table-like data from a kiara file object \u2502 \u2502 (not a path!). \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags playground \u2502 \u2502 Labels package: kiara_modules.playground \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name CreateGraphFromFileModule \u2502 \u2502 module_name kiara_modules.playground.markus \u2502 \u2502 full_name kiara_modules.playground.markus.\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 input_file: FileMetadata = inputs.get_valu\u2026 \u2502 \u2502 imported_data = csv.read_csv(input_file.pa\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"allow_column_fil\u2026 \u2502 \u2502 if self.get_config_value(\"columns\"): \u2502 \u2502 imported_data = imported_data.sele\u2026 \u2502 \u2502 self.get_config_value(\"only_co\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", imported_data) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"playground.markus.from_file"},{"location":"modules_list.html#playgroundplaygroundexample","text":"\u256d\u2500 Module: example \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 A very simple example module; concatenate two \u2502 \u2502 strings. \u2502 \u2502 \u2502 \u2502 The purpose of this module is to show the main \u2502 \u2502 elements of a KiaraModule: \u2502 \u2502 \u2502 \u2502 the (optional) configuration : must inherit \u2502 \u2502 from KiaraModuleConfig, and the config class \u2502 \u2502 must be set as the \"_config_cls\" attribute on \u2502 \u2502 the KiaraModule class. Configuration values can \u2502 \u2502 be retrieved via the self.get_config_value(key) \u2502 \u2502 method \u2502 \u2502 \u2502 \u2502 the inputs description : must return a \u2502 \u2502 dictionary, containing the input name(s) as \u2502 \u2502 keys, and another dictionary containing type \u2502 \u2502 information and documentation about the input \u2502 \u2502 data as value \u2502 \u2502 \u2502 \u2502 the outputs description : must return a \u2502 \u2502 dictionary, containing the output name(s) as \u2502 \u2502 keys, and another dictionary containing type \u2502 \u2502 information and documentation about the output \u2502 \u2502 data as value \u2502 \u2502 \u2502 \u2502 the process method : this is where the \u2502 \u2502 actual work gets done. Input data can be \u2502 \u2502 accessed via inputs.get_value_data(key), \u2502 \u2502 results can be set with the \u2502 \u2502 outputs.set_value(key, value) method \u2502 \u2502 \u2502 \u2502 Examples: \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 This example module can be tested on the c\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 kiara module explain-type playground.p\u2026 \u2502 \u2502 \u2502 \u2502 kiara module explain-instance playgrou\u2026 \u2502 \u2502 \u2502 \u2502 kiara run playground.playground.exampl\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 To set a different separator in the config\u2026 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 kiara run playground.playground.exampl\u2026 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags playground \u2502 \u2502 Labels package: kiara_modules.playground \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ExampleModule \u2502 \u2502 module_name kiara_modules.playground.playgro\u2026 \u2502 \u2502 full_name kiara_modules.playground.playgro\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 separator = self.get_config_value(\"separat\u2026 \u2502 \u2502 \u2502 \u2502 text_1 = inputs.get_value_data(\"text_1\") \u2502 \u2502 text_2 = inputs.get_value_data(\"text_2\") \u2502 \u2502 \u2502 \u2502 result = text_1 + separator + text_2 \u2502 \u2502 outputs.set_value(\"text\", result) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"playground.playground.example"},{"location":"modules_list.html#stringmatch_regex","text":"\u256d\u2500 Module: match_regex \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Match a string using a regular expression. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name RegexModule \u2502 \u2502 module_name kiara_modules.core.string \u2502 \u2502 full_name kiara_modules.core.string.RegexM\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 text = inputs.get_value_data(\"text\") \u2502 \u2502 regex = self.get_config_value(\"regex\") \u2502 \u2502 matches = re.findall(regex, text) \u2502 \u2502 \u2502 \u2502 if not matches: \u2502 \u2502 raise KiaraProcessingException(f\"No ma\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"only_first_match\u2026 \u2502 \u2502 result = matches[0] \u2502 \u2502 else: \u2502 \u2502 result = matches \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"text\", result) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"string.match_regex"},{"location":"modules_list.html#stringpretty_print","text":"\u256d\u2500 Module: pretty_print \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Pretty print arbitrary types. \u2502 \u2502 \u2502 \u2502 For now, this module only supports a few \u2502 \u2502 selected types. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name PrettyPrintModule \u2502 \u2502 module_name kiara_modules.core.string \u2502 \u2502 full_name kiara_modules.core.string.Pretty\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 input_value: Value = inputs.get_value_data\u2026 \u2502 \u2502 \u2502 \u2502 if isinstance(input_value, pyarrow.Table): \u2502 \u2502 value_type = \"table\" \u2502 \u2502 elif isinstance(input_value, ValueSet): \u2502 \u2502 value_type = \"value_set\" \u2502 \u2502 else: \u2502 \u2502 value_type = \"any\" \u2502 \u2502 \u2502 \u2502 render_config = {} \u2502 \u2502 for field in inputs.get_all_field_names(): \u2502 \u2502 value = inputs.get_value_obj(field) \u2502 \u2502 if field == \"item\": \u2502 \u2502 continue \u2502 \u2502 render_config[field] = value.get_value\u2026 \u2502 \u2502 \u2502 \u2502 input_value_str = convert_to_renderable( \u2502 \u2502 value_type=value_type, data=input_valu\u2026 \u2502 \u2502 ) \u2502 \u2502 outputs.set_value(\"renderables\", input_val\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"string.pretty_print"},{"location":"modules_list.html#stringreplace","text":"\u256d\u2500 Module: replace \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Replace a string if it matches a key in a \u2502 \u2502 mapping dictionary. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ReplaceStringModule \u2502 \u2502 module_name kiara_modules.core.string \u2502 \u2502 full_name kiara_modules.core.string.Replac\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 text = inputs.get_value_data(\"text\") \u2502 \u2502 repl_map = self.get_config_value(\"replacem\u2026 \u2502 \u2502 default = self.get_config_value(\"default_v\u2026 \u2502 \u2502 \u2502 \u2502 if text not in repl_map.keys(): \u2502 \u2502 if default is None: \u2502 \u2502 result = text \u2502 \u2502 else: \u2502 \u2502 result = default \u2502 \u2502 else: \u2502 \u2502 result = repl_map[text] \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"text\", result) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"string.replace"},{"location":"modules_list.html#stringto_string","text":"\u256d\u2500 Module: to_string \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Convert arbitrary types into strings. \u2502 \u2502 \u2502 \u2502 Early days for this module, not a lot of source \u2502 \u2502 types are supported just yet. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ToStringModule \u2502 \u2502 module_name kiara_modules.core.string \u2502 \u2502 full_name kiara_modules.core.string.ToStri\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"source_value\u2026 \u2502 \u2502 if value.value_schema.type != self.source_\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't convert value of source ty\u2026 \u2502 \u2502 ) \u2502 \u2502 config = inputs.get_value_data(\"config\") \u2502 \u2502 if config is None: \u2502 \u2502 config = {} \u2502 \u2502 \u2502 \u2502 target_value = self.convert(value=value, c\u2026 \u2502 \u2502 # TODO: validate value? \u2502 \u2502 outputs.set_value(\"target_value\", target_v\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"string.to_string"},{"location":"modules_list.html#tablecut_column","text":"\u256d\u2500 Module: cut_column \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Cut off one column from a table, returning an \u2502 \u2502 array. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name CutColumnModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.CutColu\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 table_value = inputs.get_value_obj(\"table\") \u2502 \u2502 \u2502 \u2502 column_name: str = inputs.get_value_data(\"\u2026 \u2502 \u2502 available = table_value.get_metadata(\"tabl\u2026 \u2502 \u2502 if column_name not in available: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Invalid column name '{column_nam\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 table: pa.Table = inputs.get_value_data(\"t\u2026 \u2502 \u2502 column = table.column(column_name) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"array\", column) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"table.cut_column"},{"location":"modules_list.html#tablefilterwith_mask","text":"\u256d\u2500 Module: with_mask \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Filter a table using a mask array. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name CreateFilteredTableModule \u2502 \u2502 module_name kiara_modules.core.table.filter \u2502 \u2502 full_name kiara_modules.core.table.filter.\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 input_table: pa.Table = inputs.get_value_d\u2026 \u2502 \u2502 filter_array: pa.Array = inputs.get_value_\u2026 \u2502 \u2502 \u2502 \u2502 filtered = input_table.filter(filter_array) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", filtered) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"table.filter.with_mask"},{"location":"modules_list.html#tablefrom_file","text":"\u256d\u2500 Module: from_file \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Load table-like data from a kiara file object \u2502 \u2502 (not a path!). \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name CreateTableFromFileModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.CreateT\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 input_file: FileMetadata = inputs.get_valu\u2026 \u2502 \u2502 imported_data = csv.read_csv(input_file.pa\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"allow_column_fil\u2026 \u2502 \u2502 if self.get_config_value(\"columns\"): \u2502 \u2502 imported_data = imported_data.sele\u2026 \u2502 \u2502 self.get_config_value(\"only_co\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", imported_data) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"table.from_file"},{"location":"modules_list.html#tablefrom_file_bundle","text":"\u256d\u2500 Module: from_file_bundle \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Create a table from a 'file_bundle'. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name CreateTableFromTextFilesModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.CreateT\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 bundle: FileBundleMetadata = inputs.get_va\u2026 \u2502 \u2502 \u2502 \u2502 columns = self.get_config_value(\"columns\") \u2502 \u2502 if not columns: \u2502 \u2502 columns = DEFAULT_COLUMNS \u2502 \u2502 \u2502 \u2502 if \"content\" in columns: \u2502 \u2502 file_dict = bundle.read_text_file_cont\u2026 \u2502 \u2502 else: \u2502 \u2502 file_dict = {} \u2502 \u2502 for rel_path in bundle.included_files.\u2026 \u2502 \u2502 file_dict[rel_path] = None # type\u2026 \u2502 \u2502 \u2502 \u2502 tabular: typing.Dict[str, typing.List[typi\u2026 \u2502 \u2502 for column in columns: \u2502 \u2502 for index, rel_path in enumerate(sorte\u2026 \u2502 \u2502 \u2502 \u2502 if column == \"content\": \u2502 \u2502 value: typing.Any = file_dict[\u2026 \u2502 \u2502 elif column == \"id\": \u2502 \u2502 value = index \u2502 \u2502 elif column == \"rel_path\": \u2502 \u2502 value = rel_path \u2502 \u2502 else: \u2502 \u2502 file_model = bundle.included_f\u2026 \u2502 \u2502 value = getattr(file_model, co\u2026 \u2502 \u2502 \u2502 \u2502 tabular.setdefault(column, []).app\u2026 \u2502 \u2502 \u2502 \u2502 table = pa.Table.from_pydict(tabular) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", table) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"table.from_file_bundle"},{"location":"modules_list.html#tableload","text":"\u256d\u2500 Module: load \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Load a table object from disk. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name LoadArrowTable \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.LoadArr\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 path = inputs.get_value_data(\"path\") \u2502 \u2502 format = inputs.get_value_data(\"format\") \u2502 \u2502 \u2502 \u2502 if format != \"feather\": \u2502 \u2502 raise NotImplementedError() \u2502 \u2502 \u2502 \u2502 table = feather.read_table(path) \u2502 \u2502 outputs.set_value(\"table\", table) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"table.load"},{"location":"modules_list.html#tablemap_column","text":"\u256d\u2500 Module: map_column \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Map the items of one column of a table onto an \u2502 \u2502 array, using another module. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name MapColumnModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.MapColu\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 table: pa.Table = inputs.get_value_data(\"t\u2026 \u2502 \u2502 column_name = inputs.get_value_data(\"colum\u2026 \u2502 \u2502 \u2502 \u2502 if column_name not in table.column_names: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Table column '{column_name}' not\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 input_array: pa.Array = table.column(colum\u2026 \u2502 \u2502 \u2502 \u2502 init_data: typing.Dict[str, typing.Any] = \u2026 \u2502 \u2502 for input_name in self.input_schemas.keys(\u2026 \u2502 \u2502 if input_name in [\"table\", \"column_nam\u2026 \u2502 \u2502 continue \u2502 \u2502 \u2502 \u2502 init_data[input_name] = inputs.get_val\u2026 \u2502 \u2502 \u2502 \u2502 result_list = map_with_module( \u2502 \u2502 input_array, \u2502 \u2502 module_input_name=self.module_input_na\u2026 \u2502 \u2502 module_obj=self.child_module, \u2502 \u2502 init_data=init_data, \u2502 \u2502 module_output_name=self.module_output_\u2026 \u2502 \u2502 ) \u2502 \u2502 outputs.set_value(\"array\", pa.array(result\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"table.map_column"},{"location":"modules_list.html#tablemerge","text":"\u256d\u2500 Module: merge \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Create a table from other tables and/or arrays. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name MergeTableModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.MergeTa\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 sources = inputs.get_value_data(\"sources\") \u2502 \u2502 \u2502 \u2502 len_dict = {} \u2502 \u2502 arrays = [] \u2502 \u2502 column_names = [] \u2502 \u2502 for source_key, table_or_column in sources\u2026 \u2502 \u2502 \u2502 \u2502 if isinstance(table_or_column, pa.Tabl\u2026 \u2502 \u2502 rows = table_or_column.num_rows \u2502 \u2502 for name in table_or_column.schema\u2026 \u2502 \u2502 column = table_or_column.colum\u2026 \u2502 \u2502 arrays.append(column) \u2502 \u2502 column_names.append(name) \u2502 \u2502 \u2502 \u2502 elif isinstance(table_or_column, pa.Ar\u2026 \u2502 \u2502 rows = len(table_or_column) \u2502 \u2502 arrays.append(table_or_column) \u2502 \u2502 column_names.append(source_key) \u2502 \u2502 else: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't merge table: invalid t\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 len_dict[source_key] = rows \u2502 \u2502 \u2502 \u2502 all_rows = None \u2502 \u2502 for source_key, rows in len_dict.items(): \u2502 \u2502 if all_rows is None: \u2502 \u2502 all_rows = rows \u2502 \u2502 else: \u2502 \u2502 if all_rows != rows: \u2502 \u2502 all_rows = None \u2502 \u2502 break \u2502 \u2502 \u2502 \u2502 if all_rows is None: \u2502 \u2502 len_str = \"\" \u2502 \u2502 for name, rows in len_dict.items(): \u2502 \u2502 len_str = f\" {name} ({rows})\" \u2502 \u2502 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't merge table, sources have \u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 table = pa.Table.from_arrays(arrays=arrays\u2026 \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"table\", table) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"table.merge"},{"location":"modules_list.html#tablemetadata","text":"\u256d\u2500 Module: metadata \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Extract metadata from a table object. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name TableMetadataModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.TableMe\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"value_item\") \u2502 \u2502 if value.value_schema.type != self.value_t\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't extract metadata for value\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.set_value(\"item_metadata_schema\", \u2026 \u2502 \u2502 metadata = self.extract_metadata(value) \u2502 \u2502 if isinstance(metadata, BaseModel): \u2502 \u2502 metadata = metadata.dict() \u2502 \u2502 \u2502 \u2502 # TODO: validate metadata? \u2502 \u2502 outputs.set_value(\"item_metadata\", metadat\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"table.metadata"},{"location":"modules_list.html#tablequerygraphql","text":"\u256d\u2500 Module: graphql \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Execute a graphql aggregation query against an \u2502 \u2502 (Arrow) table. \u2502 \u2502 \u2502 \u2502 References: - \u2502 \u2502 https://vaex.io/docs/example_graphql.html \u2502 \u2502 \u2502 \u2502 Examples: An example for a query could be: \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 ``` \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 df(where: { \u2502 \u2502 \u2502 \u2502 Language: {_eq: \"German\"} \u2502 \u2502 \u2502 \u2502 } ) { \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 row(limit: 10) { \u2502 \u2502 \u2502 \u2502 Label \u2502 \u2502 \u2502 \u2502 City \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ``` \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name QueryTableGraphQL \u2502 \u2502 module_name kiara_modules.core.table.query \u2502 \u2502 full_name kiara_modules.core.table.query.Q\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 table = inputs.get_value_data(\"table\") \u2502 \u2502 query = inputs.get_value_data(\"query\") \u2502 \u2502 \u2502 \u2502 df = vaex.from_arrow_table(table) \u2502 \u2502 \u2502 \u2502 result = df.graphql.execute(query) \u2502 \u2502 outputs.set_value(\"query_result\", result.t\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"table.query.graphql"},{"location":"modules_list.html#tablesave","text":"\u256d\u2500 Module: save \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Save a table object to disk. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name SaveArrowTable \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.SaveArr\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 table: pa.Table = inputs.get_value_data(\"t\u2026 \u2502 \u2502 path: str = inputs.get_value_data(\"folder_\u2026 \u2502 \u2502 file_name: str = inputs.get_value_data(\"fi\u2026 \u2502 \u2502 full_path = os.path.join(path, file_name) \u2502 \u2502 force_overwrite = inputs.get_value_data(\"f\u2026 \u2502 \u2502 \u2502 \u2502 if os.path.exists(full_path) and not force\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't write table to file, file \u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 os.makedirs(path, exist_ok=True) \u2502 \u2502 \u2502 \u2502 feather.write_feather(table, full_path) \u2502 \u2502 \u2502 \u2502 result = { \u2502 \u2502 \"module_type\": \"table.load\", \u2502 \u2502 \"inputs\": {\"path\": full_path, \"format\"\u2026 \u2502 \u2502 \"output_name\": \"table\", \u2502 \u2502 } \u2502 \u2502 outputs.set_value(\"load_config\", result) \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"table.save"},{"location":"modules_list.html#yamlto_yaml","text":"\u256d\u2500 Module: to_yaml \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Convert arbitrary types into YAML format. \u2502 \u2502 \u2502 \u2502 Early days for this module, it doesn't support \u2502 \u2502 a whole lot of types yet. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner \u2502 \u2502 (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.\u2026 \u2502 \u2502 source_url: \u2502 \u2502 https://github.com/DHARPA-Project\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ToYamlModule \u2502 \u2502 module_name kiara_modules.core.yaml \u2502 \u2502 full_name kiara_modules.core.yaml.ToYamlMo\u2026 \u2502 \u2502 \u2502 \u2502 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 def process(self, inputs: ValueSet, outputs: V\u2026 \u2502 \u2502 \u2502 \u2502 value = inputs.get_value_obj(\"source_value\u2026 \u2502 \u2502 if value.value_schema.type != self.source_\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't convert value of source ty\u2026 \u2502 \u2502 ) \u2502 \u2502 config = inputs.get_value_data(\"config\") \u2502 \u2502 if config is None: \u2502 \u2502 config = {} \u2502 \u2502 \u2502 \u2502 target_value = self.convert(value=value, c\u2026 \u2502 \u2502 # TODO: validate value? \u2502 \u2502 outputs.set_value(\"target_value\", target_v\u2026 \u2502 \u2502 \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"yaml.to_yaml"},{"location":"pipelines_list.html","text":"Available pipeline module types \u00b6 This page contains a list of all available Kiara pipeline module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type. array.load \u00b6 \u256d\u2500 Module: array.load \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Load a column from a table object, returning an array. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, array, pipeline \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 pipeline: yes \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project/kiara_\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.core/ \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.core/pi\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ArrayLoadPipelineModule \u2502 \u2502 module_name kiara_modules.core.array \u2502 \u2502 full_name kiara_modules.core.array.ArrayLoadPipel\u2026 \u2502 \u2502 \u2502 \u2502 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 { \u2502 \u2502 \"constants\": {}, \u2502 \u2502 \"defaults\": {}, \u2502 \u2502 \"steps\": [ \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"table.load\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"load_table\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"table.cut_column\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"cut_column\", \u2502 \u2502 \"input_links\": { \u2502 \u2502 \"table\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"load_table\", \u2502 \u2502 \"value_name\": \"table\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"input_aliases\": \"auto\", \u2502 \u2502 \"output_aliases\": \"auto\", \u2502 \u2502 \"documentation\": \"Load a column from a table object\u2026 \u2502 \u2502 \"context\": {}, \u2502 \u2502 \"module_type_name\": \"load\" \u2502 \u2502 } \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f logic.nand \u00b6 \u256d\u2500 Module: logic.nand \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, pipeline \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 pipeline: yes \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project/kiara_\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.core/ \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.core/pi\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name LogicNandPipelineModule \u2502 \u2502 module_name kiara_modules.core.logic \u2502 \u2502 full_name kiara_modules.core.logic.LogicNandPipel\u2026 \u2502 \u2502 \u2502 \u2502 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 { \u2502 \u2502 \"constants\": {}, \u2502 \u2502 \"defaults\": {}, \u2502 \u2502 \"steps\": [ \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"logic.and\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"and\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"logic.not\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"not\", \u2502 \u2502 \"input_links\": { \u2502 \u2502 \"a\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"and\", \u2502 \u2502 \"value_name\": \"y\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"input_aliases\": { \u2502 \u2502 \"and__a\": \"a\", \u2502 \u2502 \"and__b\": \"b\" \u2502 \u2502 }, \u2502 \u2502 \"output_aliases\": { \u2502 \u2502 \"not__y\": \"y\" \u2502 \u2502 }, \u2502 \u2502 \"documentation\": \"-- n/a --\", \u2502 \u2502 \"context\": {}, \u2502 \u2502 \"module_type_name\": \"nand\", \u2502 \u2502 \"doc\": \"Returns 'False' if both inputs are 'True'.\" \u2502 \u2502 } \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f logic.nor \u00b6 \u256d\u2500 Module: logic.nor \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, pipeline \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 pipeline: yes \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project/kiara_\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.core/ \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.core/pi\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name LogicNorPipelineModule \u2502 \u2502 module_name kiara_modules.core.logic \u2502 \u2502 full_name kiara_modules.core.logic.LogicNorPipeli\u2026 \u2502 \u2502 \u2502 \u2502 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 { \u2502 \u2502 \"constants\": {}, \u2502 \u2502 \"defaults\": {}, \u2502 \u2502 \"steps\": [ \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"logic.or\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"or\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"logic.not\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"not\", \u2502 \u2502 \"input_links\": { \u2502 \u2502 \"a\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"or\", \u2502 \u2502 \"value_name\": \"y\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"input_aliases\": { \u2502 \u2502 \"or__a\": \"a\", \u2502 \u2502 \"or__b\": \"b\" \u2502 \u2502 }, \u2502 \u2502 \"output_aliases\": { \u2502 \u2502 \"not__y\": \"y\" \u2502 \u2502 }, \u2502 \u2502 \"documentation\": \"-- n/a --\", \u2502 \u2502 \"context\": {}, \u2502 \u2502 \"module_type_name\": \"nor\", \u2502 \u2502 \"doc\": \"Returns 'True' if both inputs are 'False'.\" \u2502 \u2502 } \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f logic.xor \u00b6 \u256d\u2500 Module: logic.xor \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, pipeline \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 pipeline: yes \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project/kiara_\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.core/ \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.core/pi\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name LogicXorPipelineModule \u2502 \u2502 module_name kiara_modules.core.logic \u2502 \u2502 full_name kiara_modules.core.logic.LogicXorPipeli\u2026 \u2502 \u2502 \u2502 \u2502 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 { \u2502 \u2502 \"constants\": {}, \u2502 \u2502 \"defaults\": {}, \u2502 \u2502 \"steps\": [ \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"logic.or\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"or\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"logic.nand\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"nand\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"logic.and\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"and\", \u2502 \u2502 \"input_links\": { \u2502 \u2502 \"a\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"or\", \u2502 \u2502 \"value_name\": \"y\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"b\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"nand\", \u2502 \u2502 \"value_name\": \"y\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"input_aliases\": { \u2502 \u2502 \"or__a\": \"a\", \u2502 \u2502 \"or__b\": \"b\", \u2502 \u2502 \"nand__a\": \"a\", \u2502 \u2502 \"nand__b\": \"b\" \u2502 \u2502 }, \u2502 \u2502 \"output_aliases\": { \u2502 \u2502 \"and__y\": \"y\" \u2502 \u2502 }, \u2502 \u2502 \"documentation\": \"-- n/a --\", \u2502 \u2502 \"context\": {}, \u2502 \u2502 \"module_type_name\": \"xor\", \u2502 \u2502 \"doc\": \"Returns 'True' if exactly one of it's two i\u2026 \u2502 \u2502 } \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f table.filter.by_date \u00b6 \u256d\u2500 Module: table.filter.by_date \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, pipeline \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 pipeline: yes \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project/kiara_\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.core/ \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.core/pi\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name TableFilterBy_datePipelineModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.TableFilterBy_\u2026 \u2502 \u2502 \u2502 \u2502 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 { \u2502 \u2502 \"constants\": {}, \u2502 \u2502 \"defaults\": {}, \u2502 \u2502 \"steps\": [ \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"table.map_column\", \u2502 \u2502 \"module_config\": { \u2502 \u2502 \"module_type\": \"date.range_check\", \u2502 \u2502 \"input_name\": \"date\" \u2502 \u2502 }, \u2502 \u2502 \"step_id\": \"create_filter_mask\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"table.filter.with_mask\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"filtered_table\", \u2502 \u2502 \"input_links\": { \u2502 \u2502 \"mask\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"create_filter_mask\", \u2502 \u2502 \"value_name\": \"array\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"input_aliases\": { \u2502 \u2502 \"create_filter_mask__table\": \"table\", \u2502 \u2502 \"create_filter_mask__column_name\": \"column_name\", \u2502 \u2502 \"create_filter_mask__earliest\": \"earliest\", \u2502 \u2502 \"create_filter_mask__latest\": \"latest\", \u2502 \u2502 \"filtered_table__table\": \"table\" \u2502 \u2502 }, \u2502 \u2502 \"output_aliases\": \"auto\", \u2502 \u2502 \"documentation\": \"-- n/a --\", \u2502 \u2502 \"context\": {}, \u2502 \u2502 \"module_type_name\": \"by_date\", \u2502 \u2502 \"doc\": \"Filter a table by a date or date range.\" \u2502 \u2502 } \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f table.from_csv \u00b6 \u256d\u2500 Module: table.from_csv \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, pipeline \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 pipeline: yes \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project/kiara_\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.core/ \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.core/pi\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name TableFrom_csvPipelineModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.TableFrom_csvP\u2026 \u2502 \u2502 \u2502 \u2502 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 { \u2502 \u2502 \"constants\": {}, \u2502 \u2502 \"defaults\": {}, \u2502 \u2502 \"steps\": [ \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"onboarding.file.import\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"read_file\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"table.from_file\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"create_table_from_file\", \u2502 \u2502 \"input_links\": { \u2502 \u2502 \"file\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"read_file\", \u2502 \u2502 \"value_name\": \"file\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"input_aliases\": \"auto\", \u2502 \u2502 \"output_aliases\": \"auto\", \u2502 \u2502 \"documentation\": \"-- n/a --\", \u2502 \u2502 \"context\": {}, \u2502 \u2502 \"module_type_name\": \"from_csv\", \u2502 \u2502 \"doc\": \"Import a csv file and create a table from i\u2026 \u2502 \u2502 } \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f table.from_folder \u00b6 \u256d\u2500 Module: table.from_folder \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, pipeline \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 pipeline: yes \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project/kiara_\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.core/ \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.core/pi\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name TableFrom_folderPipelineModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.TableFrom_fold\u2026 \u2502 \u2502 \u2502 \u2502 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 { \u2502 \u2502 \"constants\": {}, \u2502 \u2502 \"defaults\": {}, \u2502 \u2502 \"steps\": [ \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"onboarding.folder.import\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"read_files_in_folder\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"table.from_file_bundle\", \u2502 \u2502 \"module_config\": { \u2502 \u2502 \"columns\": [ \u2502 \u2502 \"id\", \u2502 \u2502 \"rel_path\", \u2502 \u2502 \"file_name\", \u2502 \u2502 \"content\" \u2502 \u2502 ] \u2502 \u2502 }, \u2502 \u2502 \"step_id\": \"create_table_from_files\", \u2502 \u2502 \"input_links\": { \u2502 \u2502 \"files\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"read_files_in_folder\", \u2502 \u2502 \"value_name\": \"file_bundle\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"input_aliases\": \"auto\", \u2502 \u2502 \"output_aliases\": \"auto\", \u2502 \u2502 \"documentation\": \"-- n/a --\", \u2502 \u2502 \"context\": {}, \u2502 \u2502 \"module_type_name\": \"from_folder\", \u2502 \u2502 \"doc\": \"Import a folder of text files and create a \u2026 \u2502 \u2502 } \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Included pipelines"},{"location":"pipelines_list.html#available-pipeline-module-types","text":"This page contains a list of all available Kiara pipeline module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Available pipeline module types"},{"location":"pipelines_list.html#arrayload","text":"\u256d\u2500 Module: array.load \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 Load a column from a table object, returning an array. \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, array, pipeline \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 pipeline: yes \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project/kiara_\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.core/ \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.core/pi\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name ArrayLoadPipelineModule \u2502 \u2502 module_name kiara_modules.core.array \u2502 \u2502 full_name kiara_modules.core.array.ArrayLoadPipel\u2026 \u2502 \u2502 \u2502 \u2502 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 { \u2502 \u2502 \"constants\": {}, \u2502 \u2502 \"defaults\": {}, \u2502 \u2502 \"steps\": [ \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"table.load\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"load_table\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"table.cut_column\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"cut_column\", \u2502 \u2502 \"input_links\": { \u2502 \u2502 \"table\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"load_table\", \u2502 \u2502 \"value_name\": \"table\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"input_aliases\": \"auto\", \u2502 \u2502 \"output_aliases\": \"auto\", \u2502 \u2502 \"documentation\": \"Load a column from a table object\u2026 \u2502 \u2502 \"context\": {}, \u2502 \u2502 \"module_type_name\": \"load\" \u2502 \u2502 } \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"array.load"},{"location":"pipelines_list.html#logicnand","text":"\u256d\u2500 Module: logic.nand \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, pipeline \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 pipeline: yes \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project/kiara_\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.core/ \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.core/pi\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name LogicNandPipelineModule \u2502 \u2502 module_name kiara_modules.core.logic \u2502 \u2502 full_name kiara_modules.core.logic.LogicNandPipel\u2026 \u2502 \u2502 \u2502 \u2502 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 { \u2502 \u2502 \"constants\": {}, \u2502 \u2502 \"defaults\": {}, \u2502 \u2502 \"steps\": [ \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"logic.and\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"and\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"logic.not\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"not\", \u2502 \u2502 \"input_links\": { \u2502 \u2502 \"a\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"and\", \u2502 \u2502 \"value_name\": \"y\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"input_aliases\": { \u2502 \u2502 \"and__a\": \"a\", \u2502 \u2502 \"and__b\": \"b\" \u2502 \u2502 }, \u2502 \u2502 \"output_aliases\": { \u2502 \u2502 \"not__y\": \"y\" \u2502 \u2502 }, \u2502 \u2502 \"documentation\": \"-- n/a --\", \u2502 \u2502 \"context\": {}, \u2502 \u2502 \"module_type_name\": \"nand\", \u2502 \u2502 \"doc\": \"Returns 'False' if both inputs are 'True'.\" \u2502 \u2502 } \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"logic.nand"},{"location":"pipelines_list.html#logicnor","text":"\u256d\u2500 Module: logic.nor \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, pipeline \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 pipeline: yes \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project/kiara_\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.core/ \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.core/pi\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name LogicNorPipelineModule \u2502 \u2502 module_name kiara_modules.core.logic \u2502 \u2502 full_name kiara_modules.core.logic.LogicNorPipeli\u2026 \u2502 \u2502 \u2502 \u2502 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 { \u2502 \u2502 \"constants\": {}, \u2502 \u2502 \"defaults\": {}, \u2502 \u2502 \"steps\": [ \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"logic.or\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"or\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"logic.not\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"not\", \u2502 \u2502 \"input_links\": { \u2502 \u2502 \"a\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"or\", \u2502 \u2502 \"value_name\": \"y\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"input_aliases\": { \u2502 \u2502 \"or__a\": \"a\", \u2502 \u2502 \"or__b\": \"b\" \u2502 \u2502 }, \u2502 \u2502 \"output_aliases\": { \u2502 \u2502 \"not__y\": \"y\" \u2502 \u2502 }, \u2502 \u2502 \"documentation\": \"-- n/a --\", \u2502 \u2502 \"context\": {}, \u2502 \u2502 \"module_type_name\": \"nor\", \u2502 \u2502 \"doc\": \"Returns 'True' if both inputs are 'False'.\" \u2502 \u2502 } \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"logic.nor"},{"location":"pipelines_list.html#logicxor","text":"\u256d\u2500 Module: logic.xor \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, pipeline \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 pipeline: yes \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project/kiara_\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.core/ \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.core/pi\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name LogicXorPipelineModule \u2502 \u2502 module_name kiara_modules.core.logic \u2502 \u2502 full_name kiara_modules.core.logic.LogicXorPipeli\u2026 \u2502 \u2502 \u2502 \u2502 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 { \u2502 \u2502 \"constants\": {}, \u2502 \u2502 \"defaults\": {}, \u2502 \u2502 \"steps\": [ \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"logic.or\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"or\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"logic.nand\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"nand\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"logic.and\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"and\", \u2502 \u2502 \"input_links\": { \u2502 \u2502 \"a\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"or\", \u2502 \u2502 \"value_name\": \"y\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"b\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"nand\", \u2502 \u2502 \"value_name\": \"y\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"input_aliases\": { \u2502 \u2502 \"or__a\": \"a\", \u2502 \u2502 \"or__b\": \"b\", \u2502 \u2502 \"nand__a\": \"a\", \u2502 \u2502 \"nand__b\": \"b\" \u2502 \u2502 }, \u2502 \u2502 \"output_aliases\": { \u2502 \u2502 \"and__y\": \"y\" \u2502 \u2502 }, \u2502 \u2502 \"documentation\": \"-- n/a --\", \u2502 \u2502 \"context\": {}, \u2502 \u2502 \"module_type_name\": \"xor\", \u2502 \u2502 \"doc\": \"Returns 'True' if exactly one of it's two i\u2026 \u2502 \u2502 } \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"logic.xor"},{"location":"pipelines_list.html#tablefilterby_date","text":"\u256d\u2500 Module: table.filter.by_date \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, pipeline \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 pipeline: yes \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project/kiara_\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.core/ \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.core/pi\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name TableFilterBy_datePipelineModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.TableFilterBy_\u2026 \u2502 \u2502 \u2502 \u2502 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 { \u2502 \u2502 \"constants\": {}, \u2502 \u2502 \"defaults\": {}, \u2502 \u2502 \"steps\": [ \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"table.map_column\", \u2502 \u2502 \"module_config\": { \u2502 \u2502 \"module_type\": \"date.range_check\", \u2502 \u2502 \"input_name\": \"date\" \u2502 \u2502 }, \u2502 \u2502 \"step_id\": \"create_filter_mask\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"table.filter.with_mask\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"filtered_table\", \u2502 \u2502 \"input_links\": { \u2502 \u2502 \"mask\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"create_filter_mask\", \u2502 \u2502 \"value_name\": \"array\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"input_aliases\": { \u2502 \u2502 \"create_filter_mask__table\": \"table\", \u2502 \u2502 \"create_filter_mask__column_name\": \"column_name\", \u2502 \u2502 \"create_filter_mask__earliest\": \"earliest\", \u2502 \u2502 \"create_filter_mask__latest\": \"latest\", \u2502 \u2502 \"filtered_table__table\": \"table\" \u2502 \u2502 }, \u2502 \u2502 \"output_aliases\": \"auto\", \u2502 \u2502 \"documentation\": \"-- n/a --\", \u2502 \u2502 \"context\": {}, \u2502 \u2502 \"module_type_name\": \"by_date\", \u2502 \u2502 \"doc\": \"Filter a table by a date or date range.\" \u2502 \u2502 } \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"table.filter.by_date"},{"location":"pipelines_list.html#tablefrom_csv","text":"\u256d\u2500 Module: table.from_csv \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, pipeline \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 pipeline: yes \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project/kiara_\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.core/ \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.core/pi\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name TableFrom_csvPipelineModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.TableFrom_csvP\u2026 \u2502 \u2502 \u2502 \u2502 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 { \u2502 \u2502 \"constants\": {}, \u2502 \u2502 \"defaults\": {}, \u2502 \u2502 \"steps\": [ \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"onboarding.file.import\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"read_file\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"table.from_file\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"create_table_from_file\", \u2502 \u2502 \"input_links\": { \u2502 \u2502 \"file\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"read_file\", \u2502 \u2502 \"value_name\": \"file\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"input_aliases\": \"auto\", \u2502 \u2502 \"output_aliases\": \"auto\", \u2502 \u2502 \"documentation\": \"-- n/a --\", \u2502 \u2502 \"context\": {}, \u2502 \u2502 \"module_type_name\": \"from_csv\", \u2502 \u2502 \"doc\": \"Import a csv file and create a table from i\u2026 \u2502 \u2502 } \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"table.from_csv"},{"location":"pipelines_list.html#tablefrom_folder","text":"\u256d\u2500 Module: table.from_folder \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Documentation \u2502 \u2502 -- n/a -- \u2502 \u2502 \u2502 \u2502 Origin \u2502 \u2502 Authors Markus Binsteiner (markus.binsteiner@uni.lu) \u2502 \u2502 \u2502 \u2502 Context \u2502 \u2502 Tags core, pipeline \u2502 \u2502 Labels package: kiara_modules.core \u2502 \u2502 pipeline: yes \u2502 \u2502 References source_repo: \u2502 \u2502 https://github.com/DHARPA-Project/kiara_\u2026 \u2502 \u2502 documentation: \u2502 \u2502 https://dharpa.org/kiara_modules.core/ \u2502 \u2502 module_doc: \u2502 \u2502 https://dharpa.org/kiara_modules.core/pi\u2026 \u2502 \u2502 \u2502 \u2502 Python class \u2502 \u2502 class_name TableFrom_folderPipelineModule \u2502 \u2502 module_name kiara_modules.core.table \u2502 \u2502 full_name kiara_modules.core.table.TableFrom_fold\u2026 \u2502 \u2502 \u2502 \u2502 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 { \u2502 \u2502 \"constants\": {}, \u2502 \u2502 \"defaults\": {}, \u2502 \u2502 \"steps\": [ \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"onboarding.folder.import\", \u2502 \u2502 \"module_config\": {}, \u2502 \u2502 \"step_id\": \"read_files_in_folder\", \u2502 \u2502 \"input_links\": {} \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"module_type\": \"table.from_file_bundle\", \u2502 \u2502 \"module_config\": { \u2502 \u2502 \"columns\": [ \u2502 \u2502 \"id\", \u2502 \u2502 \"rel_path\", \u2502 \u2502 \"file_name\", \u2502 \u2502 \"content\" \u2502 \u2502 ] \u2502 \u2502 }, \u2502 \u2502 \"step_id\": \"create_table_from_files\", \u2502 \u2502 \"input_links\": { \u2502 \u2502 \"files\": [ \u2502 \u2502 { \u2502 \u2502 \"step_id\": \"read_files_in_folder\", \u2502 \u2502 \"value_name\": \"file_bundle\", \u2502 \u2502 \"sub_value\": null \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"input_aliases\": \"auto\", \u2502 \u2502 \"output_aliases\": \"auto\", \u2502 \u2502 \"documentation\": \"-- n/a --\", \u2502 \u2502 \"context\": {}, \u2502 \u2502 \"module_type_name\": \"from_folder\", \u2502 \u2502 \"doc\": \"Import a folder of text files and create a \u2026 \u2502 \u2502 } \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"table.from_folder"},{"location":"usage.html","text":"Usage \u00b6 TO BE DONE","title":"Usage"},{"location":"usage.html#usage","text":"TO BE DONE","title":"Usage"},{"location":"api_reference/kiara_modules.playground.lena.html","text":"kiara_modules.playground.lena \u00b6 FindLargestComponentsModuleConfig pydantic-model \u00b6 find_largest_component : bool pydantic-field \u00b6 Find the largest component of a graph. number_of_components : bool pydantic-field \u00b6 Count the number of components. GrpahComponentsModule \u00b6 create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in playground/lena.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network.graph\" , \"doc\" : \"The network graph.\" }} create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in playground/lena.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: result = {} if self . get_config_value ( \"find_largest_component\" ): result [ \"largest_component\" ] = { \"type\" : \"network.graph\" , \"doc\" : \"A sub-graph of the largest component of the graph.\" , } if self . get_config_value ( \"number_of_components\" ): result [ \"number_of_components\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of components in the graph.\" , } return result process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs ValueSet the input value set required outputs ValueSet the output value set required Source code in playground/lena.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : if self . get_config_value ( \"find_largest_component\" ): input_graph : Graph = inputs . get_value_data ( \"graph\" ) undir_graph = nx . to_undirected ( input_graph ) undir_components = nx . connected_components ( undir_graph ) lg_component = max ( undir_components , key = len ) subgraph = input_graph . subgraph ( lg_component ) outputs . set_values ( largest_component = subgraph ) if self . get_config_value ( \"number_of_components\" ): input_graph = inputs . get_value_data ( \"graph\" ) undir_graph = nx . to_undirected ( input_graph ) number_of_components = nx . number_connected_components ( undir_graph ) outputs . set_values ( number_of_components = number_of_components )","title":"\u279c\u2007lena"},{"location":"api_reference/kiara_modules.playground.lena.html#kiara_modulesplaygroundlena","text":"","title":"kiara_modules.playground.lena"},{"location":"api_reference/kiara_modules.playground.lena.html#kiara_modules.playground.lena.FindLargestComponentsModuleConfig","text":"","title":"FindLargestComponentsModuleConfig"},{"location":"api_reference/kiara_modules.playground.lena.html#kiara_modules.playground.lena.FindLargestComponentsModuleConfig.find_largest_component","text":"Find the largest component of a graph.","title":"find_largest_component"},{"location":"api_reference/kiara_modules.playground.lena.html#kiara_modules.playground.lena.FindLargestComponentsModuleConfig.number_of_components","text":"Count the number of components.","title":"number_of_components"},{"location":"api_reference/kiara_modules.playground.lena.html#kiara_modules.playground.lena.GrpahComponentsModule","text":"","title":"GrpahComponentsModule"},{"location":"api_reference/kiara_modules.playground.lena.html#kiara_modules.playground.lena.GrpahComponentsModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in playground/lena.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network.graph\" , \"doc\" : \"The network graph.\" }}","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.playground.lena.html#kiara_modules.playground.lena.GrpahComponentsModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in playground/lena.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: result = {} if self . get_config_value ( \"find_largest_component\" ): result [ \"largest_component\" ] = { \"type\" : \"network.graph\" , \"doc\" : \"A sub-graph of the largest component of the graph.\" , } if self . get_config_value ( \"number_of_components\" ): result [ \"number_of_components\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of components in the graph.\" , } return result","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.playground.lena.html#kiara_modules.playground.lena.GrpahComponentsModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs ValueSet the input value set required outputs ValueSet the output value set required Source code in playground/lena.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : if self . get_config_value ( \"find_largest_component\" ): input_graph : Graph = inputs . get_value_data ( \"graph\" ) undir_graph = nx . to_undirected ( input_graph ) undir_components = nx . connected_components ( undir_graph ) lg_component = max ( undir_components , key = len ) subgraph = input_graph . subgraph ( lg_component ) outputs . set_values ( largest_component = subgraph ) if self . get_config_value ( \"number_of_components\" ): input_graph = inputs . get_value_data ( \"graph\" ) undir_graph = nx . to_undirected ( input_graph ) number_of_components = nx . number_connected_components ( undir_graph ) outputs . set_values ( number_of_components = number_of_components )","title":"process()"},{"location":"api_reference/kiara_modules.playground.markus.html","text":"kiara_modules.playground.markus \u00b6 CreateGraphFromFileModule \u00b6 Load table-like data from a kiara file object (not a path!). create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in playground/markus.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"file\" : { \"type\" : \"file\" , \"doc\" : \"The file that contains table data.\" , \"optional\" : False , } } if self . get_config_value ( \"allow_column_filter\" ): inputs [ \"columns\" ] = { \"type\" : \"array\" , \"doc\" : \"If provided, only import the columns that match items in this list.\" , \"optional\" : False , } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in playground/markus.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"table\" : { \"type\" : \"table\" , \"doc\" : \"the imported table\" }} process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs ValueSet the input value set required outputs ValueSet the output value set required Source code in playground/markus.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : input_file : FileMetadata = inputs . get_value_data ( \"file\" ) imported_data = csv . read_csv ( input_file . path ) if self . get_config_value ( \"allow_column_filter\" ): if self . get_config_value ( \"columns\" ): imported_data = imported_data . select ( self . get_config_value ( \"only_columns\" ) ) outputs . set_value ( \"table\" , imported_data )","title":"\u279c\u2007markus"},{"location":"api_reference/kiara_modules.playground.markus.html#kiara_modulesplaygroundmarkus","text":"","title":"kiara_modules.playground.markus"},{"location":"api_reference/kiara_modules.playground.markus.html#kiara_modules.playground.markus.CreateGraphFromFileModule","text":"Load table-like data from a kiara file object (not a path!).","title":"CreateGraphFromFileModule"},{"location":"api_reference/kiara_modules.playground.markus.html#kiara_modules.playground.markus.CreateGraphFromFileModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in playground/markus.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"file\" : { \"type\" : \"file\" , \"doc\" : \"The file that contains table data.\" , \"optional\" : False , } } if self . get_config_value ( \"allow_column_filter\" ): inputs [ \"columns\" ] = { \"type\" : \"array\" , \"doc\" : \"If provided, only import the columns that match items in this list.\" , \"optional\" : False , } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.playground.markus.html#kiara_modules.playground.markus.CreateGraphFromFileModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in playground/markus.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"table\" : { \"type\" : \"table\" , \"doc\" : \"the imported table\" }}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.playground.markus.html#kiara_modules.playground.markus.CreateGraphFromFileModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs ValueSet the input value set required outputs ValueSet the output value set required Source code in playground/markus.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : input_file : FileMetadata = inputs . get_value_data ( \"file\" ) imported_data = csv . read_csv ( input_file . path ) if self . get_config_value ( \"allow_column_filter\" ): if self . get_config_value ( \"columns\" ): imported_data = imported_data . select ( self . get_config_value ( \"only_columns\" ) ) outputs . set_value ( \"table\" , imported_data )","title":"process()"},{"location":"api_reference/kiara_modules.playground.html","text":"kiara_modules.playground \u00b6 Top-level package for kiara_modules.playground.","title":"kiara_modules.playground"},{"location":"api_reference/kiara_modules.playground.html#kiara_modulesplayground","text":"Top-level package for kiara_modules.playground.","title":"kiara_modules.playground"},{"location":"api_reference/kiara_modules.playground.metadata_schemas.html","text":"kiara_modules.playground.metadata_schemas \u00b6 This module contains the metadata models that are used in the kiara_modules.playground package. Metadata models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata that is attached to data, as well as kiara modules. It is possible to register metadata using a JSON schema string, but it is recommended to create a metadata model, because it is much easier overall. Metadata models must be a sub-class of kiara.metadata.MetadataModel .","title":"\u279c\u2007metadata_schemas"},{"location":"api_reference/kiara_modules.playground.metadata_schemas.html#kiara_modulesplaygroundmetadata_schemas","text":"This module contains the metadata models that are used in the kiara_modules.playground package. Metadata models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata that is attached to data, as well as kiara modules. It is possible to register metadata using a JSON schema string, but it is recommended to create a metadata model, because it is much easier overall. Metadata models must be a sub-class of kiara.metadata.MetadataModel .","title":"kiara_modules.playground.metadata_schemas"},{"location":"api_reference/kiara_modules.playground.pipelines.html","text":"kiara_modules.playground.pipelines \u00b6 Virtual module that is used as base for PipelineModule classes that are auto-generated from pipeline descriptions under this folder.","title":"\u279c\u2007pipelines"},{"location":"api_reference/kiara_modules.playground.pipelines.html#kiara_modulesplaygroundpipelines","text":"Virtual module that is used as base for PipelineModule classes that are auto-generated from pipeline descriptions under this folder.","title":"kiara_modules.playground.pipelines"},{"location":"api_reference/kiara_modules.playground.playground.html","text":"kiara_modules.playground.playground \u00b6 ExampleModule \u00b6 A very simple example module; concatenate two strings. The purpose of this module is to show the main elements of a KiaraModule : the (optional) configuration : must inherit from KiaraModuleConfig , and the config class must be set as the \"_config_cls\" attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with one of the relevant kiara commands: kiara module explain-type playground.playground.example kiara module explain-instance playground.playground.example kiara run playground.playground.example text_1=\"xxx\" text_2=\"yyy\" To set a different separator in the config for this module, and use that via the cli, you could do: kiara run playground.playground.example --module-config separator=\".\" text_1=\"xxx\" text_2=\"yyy\" create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in playground/playground.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in playground/playground.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs ValueSet the input value set required outputs ValueSet the output value set required Source code in playground/playground.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result ) ExampleModuleConfig pydantic-model \u00b6 separator : str pydantic-field \u00b6 The seperator between the two strings.","title":"\u279c\u2007playground"},{"location":"api_reference/kiara_modules.playground.playground.html#kiara_modulesplaygroundplayground","text":"","title":"kiara_modules.playground.playground"},{"location":"api_reference/kiara_modules.playground.playground.html#kiara_modules.playground.playground.ExampleModule","text":"A very simple example module; concatenate two strings. The purpose of this module is to show the main elements of a KiaraModule : the (optional) configuration : must inherit from KiaraModuleConfig , and the config class must be set as the \"_config_cls\" attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with one of the relevant kiara commands: kiara module explain-type playground.playground.example kiara module explain-instance playground.playground.example kiara run playground.playground.example text_1=\"xxx\" text_2=\"yyy\" To set a different separator in the config for this module, and use that via the cli, you could do: kiara run playground.playground.example --module-config separator=\".\" text_1=\"xxx\" text_2=\"yyy\"","title":"ExampleModule"},{"location":"api_reference/kiara_modules.playground.playground.html#kiara_modules.playground.playground.ExampleModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in playground/playground.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.playground.playground.html#kiara_modules.playground.playground.ExampleModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in playground/playground.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.playground.playground.html#kiara_modules.playground.playground.ExampleModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs ValueSet the input value set required outputs ValueSet the output value set required Source code in playground/playground.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result )","title":"process()"},{"location":"api_reference/kiara_modules.playground.playground.html#kiara_modules.playground.playground.ExampleModuleConfig","text":"","title":"ExampleModuleConfig"},{"location":"api_reference/kiara_modules.playground.playground.html#kiara_modules.playground.playground.ExampleModuleConfig.separator","text":"The seperator between the two strings.","title":"separator"},{"location":"api_reference/kiara_modules.playground.value_types.html","text":"kiara_modules.playground.value_types \u00b6 This module contains the value type classes that are used in the kiara_modules.playground package.","title":"\u279c\u2007value_types"},{"location":"api_reference/kiara_modules.playground.value_types.html#kiara_modulesplaygroundvalue_types","text":"This module contains the value type classes that are used in the kiara_modules.playground package.","title":"kiara_modules.playground.value_types"}]}